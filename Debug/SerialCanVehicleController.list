
SerialCanVehicleController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006640  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006894  08006894  00007894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d4  080068d4  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080068d4  080068d4  000078d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068dc  080068dc  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068dc  080068dc  000078dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068e0  080068e0  000078e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080068e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080068f0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080068f0  000080c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee35  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b99  00000000  00000000  00016e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00018a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c4  00000000  00000000  00019420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dcb  00000000  00000000  00019be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd4d  00000000  00000000  000439af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108b22  00000000  00000000  000516fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a21e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  0015a264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	0800687c 	.word	0x0800687c

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	0800687c 	.word	0x0800687c

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b9b0 	b.w	800060c <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ca:	4688      	mov	r8, r1
 80002cc:	4604      	mov	r4, r0
 80002ce:	468e      	mov	lr, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14a      	bne.n	800036a <__udivmoddi4+0xa6>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4617      	mov	r7, r2
 80002d8:	d95f      	bls.n	800039a <__udivmoddi4+0xd6>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	b14e      	cbz	r6, 80002f4 <__udivmoddi4+0x30>
 80002e0:	f1c6 0320 	rsb	r3, r6, #32
 80002e4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	40b4      	lsls	r4, r6
 80002ec:	fa20 f303 	lsr.w	r3, r0, r3
 80002f0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f8:	fa1f fc87 	uxth.w	ip, r7
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fbbe f1f8 	udiv	r1, lr, r8
 8000302:	fb08 ee11 	mls	lr, r8, r1, lr
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x5e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f101 30ff 	add.w	r0, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x5c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 8154 	bhi.w	80005c8 <__udivmoddi4+0x304>
 8000320:	4601      	mov	r1, r0
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	b2a2      	uxth	r2, r4
 8000326:	fbb3 f0f8 	udiv	r0, r3, r8
 800032a:	fb08 3310 	mls	r3, r8, r0, r3
 800032e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000332:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000336:	4594      	cmp	ip, r2
 8000338:	d90b      	bls.n	8000352 <__udivmoddi4+0x8e>
 800033a:	18ba      	adds	r2, r7, r2
 800033c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000340:	bf2c      	ite	cs
 8000342:	2401      	movcs	r4, #1
 8000344:	2400      	movcc	r4, #0
 8000346:	4594      	cmp	ip, r2
 8000348:	d902      	bls.n	8000350 <__udivmoddi4+0x8c>
 800034a:	2c00      	cmp	r4, #0
 800034c:	f000 813f 	beq.w	80005ce <__udivmoddi4+0x30a>
 8000350:	4618      	mov	r0, r3
 8000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000356:	eba2 020c 	sub.w	r2, r2, ip
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa2>
 800035e:	40f2      	lsrs	r2, r6
 8000360:	2300      	movs	r3, #0
 8000362:	e9c5 2300 	strd	r2, r3, [r5]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xb6>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb0>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa2>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d14e      	bne.n	8000420 <__udivmoddi4+0x15c>
 8000382:	4543      	cmp	r3, r8
 8000384:	f0c0 8112 	bcc.w	80005ac <__udivmoddi4+0x2e8>
 8000388:	4282      	cmp	r2, r0
 800038a:	f240 810f 	bls.w	80005ac <__udivmoddi4+0x2e8>
 800038e:	4608      	mov	r0, r1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e8      	beq.n	8000366 <__udivmoddi4+0xa2>
 8000394:	e9c5 4e00 	strd	r4, lr, [r5]
 8000398:	e7e5      	b.n	8000366 <__udivmoddi4+0xa2>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f000 80ac 	beq.w	80004f8 <__udivmoddi4+0x234>
 80003a0:	fab2 f682 	clz	r6, r2
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	f040 80bb 	bne.w	8000520 <__udivmoddi4+0x25c>
 80003aa:	1a8b      	subs	r3, r1, r2
 80003ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b0:	b2bc      	uxth	r4, r7
 80003b2:	2101      	movs	r1, #1
 80003b4:	0c02      	lsrs	r2, r0, #16
 80003b6:	b280      	uxth	r0, r0
 80003b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003c4:	fb04 f20c 	mul.w	r2, r4, ip
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d90e      	bls.n	80003ea <__udivmoddi4+0x126>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d2:	bf2c      	ite	cs
 80003d4:	f04f 0901 	movcs.w	r9, #1
 80003d8:	f04f 0900 	movcc.w	r9, #0
 80003dc:	429a      	cmp	r2, r3
 80003de:	d903      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003e0:	f1b9 0f00 	cmp.w	r9, #0
 80003e4:	f000 80ec 	beq.w	80005c0 <__udivmoddi4+0x2fc>
 80003e8:	46c4      	mov	ip, r8
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003f4:	fb04 f408 	mul.w	r4, r4, r8
 80003f8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003fc:	4294      	cmp	r4, r2
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x154>
 8000400:	18ba      	adds	r2, r7, r2
 8000402:	f108 33ff 	add.w	r3, r8, #4294967295
 8000406:	bf2c      	ite	cs
 8000408:	2001      	movcs	r0, #1
 800040a:	2000      	movcc	r0, #0
 800040c:	4294      	cmp	r4, r2
 800040e:	d902      	bls.n	8000416 <__udivmoddi4+0x152>
 8000410:	2800      	cmp	r0, #0
 8000412:	f000 80d1 	beq.w	80005b8 <__udivmoddi4+0x2f4>
 8000416:	4698      	mov	r8, r3
 8000418:	1b12      	subs	r2, r2, r4
 800041a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800041e:	e79d      	b.n	800035c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa08 f401 	lsl.w	r4, r8, r1
 800042a:	fa00 f901 	lsl.w	r9, r0, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa28 f806 	lsr.w	r8, r8, r6
 8000436:	408a      	lsls	r2, r1
 8000438:	431f      	orrs	r7, r3
 800043a:	fa20 f306 	lsr.w	r3, r0, r6
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	4323      	orrs	r3, r4
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fbb8 fef0 	udiv	lr, r8, r0
 800044c:	fb00 881e 	mls	r8, r0, lr, r8
 8000450:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000454:	fb0e f80c 	mul.w	r8, lr, ip
 8000458:	45a0      	cmp	r8, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b6>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a0      	cmp	r8, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b4>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 80b8 	beq.w	80005e8 <__udivmoddi4+0x324>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fa1f f883 	uxth.w	r8, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d90e      	bls.n	80004b4 <__udivmoddi4+0x1f0>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	bf2c      	ite	cs
 800049e:	f04f 0801 	movcs.w	r8, #1
 80004a2:	f04f 0800 	movcc.w	r8, #0
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d903      	bls.n	80004b2 <__udivmoddi4+0x1ee>
 80004aa:	f1b8 0f00 	cmp.w	r8, #0
 80004ae:	f000 809f 	beq.w	80005f0 <__udivmoddi4+0x32c>
 80004b2:	4603      	mov	r3, r0
 80004b4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b8:	eba4 040c 	sub.w	r4, r4, ip
 80004bc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c0:	4564      	cmp	r4, ip
 80004c2:	4673      	mov	r3, lr
 80004c4:	46e0      	mov	r8, ip
 80004c6:	d302      	bcc.n	80004ce <__udivmoddi4+0x20a>
 80004c8:	d107      	bne.n	80004da <__udivmoddi4+0x216>
 80004ca:	45f1      	cmp	r9, lr
 80004cc:	d205      	bcs.n	80004da <__udivmoddi4+0x216>
 80004ce:	ebbe 0302 	subs.w	r3, lr, r2
 80004d2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	46e0      	mov	r8, ip
 80004da:	b15d      	cbz	r5, 80004f4 <__udivmoddi4+0x230>
 80004dc:	ebb9 0203 	subs.w	r2, r9, r3
 80004e0:	eb64 0408 	sbc.w	r4, r4, r8
 80004e4:	fa04 f606 	lsl.w	r6, r4, r6
 80004e8:	fa22 f301 	lsr.w	r3, r2, r1
 80004ec:	40cc      	lsrs	r4, r1
 80004ee:	431e      	orrs	r6, r3
 80004f0:	e9c5 6400 	strd	r6, r4, [r5]
 80004f4:	2100      	movs	r1, #0
 80004f6:	e736      	b.n	8000366 <__udivmoddi4+0xa2>
 80004f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	4614      	mov	r4, r2
 8000500:	b280      	uxth	r0, r0
 8000502:	4696      	mov	lr, r2
 8000504:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000508:	2620      	movs	r6, #32
 800050a:	4690      	mov	r8, r2
 800050c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000510:	4610      	mov	r0, r2
 8000512:	fbb1 f1f2 	udiv	r1, r1, r2
 8000516:	eba3 0308 	sub.w	r3, r3, r8
 800051a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051e:	e74b      	b.n	80003b8 <__udivmoddi4+0xf4>
 8000520:	40b7      	lsls	r7, r6
 8000522:	f1c6 0320 	rsb	r3, r6, #32
 8000526:	fa01 f206 	lsl.w	r2, r1, r6
 800052a:	fa21 f803 	lsr.w	r8, r1, r3
 800052e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000532:	fa20 f303 	lsr.w	r3, r0, r3
 8000536:	b2bc      	uxth	r4, r7
 8000538:	40b0      	lsls	r0, r6
 800053a:	4313      	orrs	r3, r2
 800053c:	0c02      	lsrs	r2, r0, #16
 800053e:	0c19      	lsrs	r1, r3, #16
 8000540:	b280      	uxth	r0, r0
 8000542:	fbb8 f9fe 	udiv	r9, r8, lr
 8000546:	fb0e 8819 	mls	r8, lr, r9, r8
 800054a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	4588      	cmp	r8, r1
 8000554:	d951      	bls.n	80005fa <__udivmoddi4+0x336>
 8000556:	1879      	adds	r1, r7, r1
 8000558:	f109 3cff 	add.w	ip, r9, #4294967295
 800055c:	bf2c      	ite	cs
 800055e:	f04f 0a01 	movcs.w	sl, #1
 8000562:	f04f 0a00 	movcc.w	sl, #0
 8000566:	4588      	cmp	r8, r1
 8000568:	d902      	bls.n	8000570 <__udivmoddi4+0x2ac>
 800056a:	f1ba 0f00 	cmp.w	sl, #0
 800056e:	d031      	beq.n	80005d4 <__udivmoddi4+0x310>
 8000570:	eba1 0108 	sub.w	r1, r1, r8
 8000574:	fbb1 f9fe 	udiv	r9, r1, lr
 8000578:	fb09 f804 	mul.w	r8, r9, r4
 800057c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000580:	b29b      	uxth	r3, r3
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	4543      	cmp	r3, r8
 8000588:	d235      	bcs.n	80005f6 <__udivmoddi4+0x332>
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000590:	bf2c      	ite	cs
 8000592:	f04f 0a01 	movcs.w	sl, #1
 8000596:	f04f 0a00 	movcc.w	sl, #0
 800059a:	4543      	cmp	r3, r8
 800059c:	d2bb      	bcs.n	8000516 <__udivmoddi4+0x252>
 800059e:	f1ba 0f00 	cmp.w	sl, #0
 80005a2:	d1b8      	bne.n	8000516 <__udivmoddi4+0x252>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e7b4      	b.n	8000516 <__udivmoddi4+0x252>
 80005ac:	1a84      	subs	r4, r0, r2
 80005ae:	eb68 0203 	sbc.w	r2, r8, r3
 80005b2:	2001      	movs	r0, #1
 80005b4:	4696      	mov	lr, r2
 80005b6:	e6eb      	b.n	8000390 <__udivmoddi4+0xcc>
 80005b8:	443a      	add	r2, r7
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	e72b      	b.n	8000418 <__udivmoddi4+0x154>
 80005c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c4:	443b      	add	r3, r7
 80005c6:	e710      	b.n	80003ea <__udivmoddi4+0x126>
 80005c8:	3902      	subs	r1, #2
 80005ca:	443b      	add	r3, r7
 80005cc:	e6a9      	b.n	8000322 <__udivmoddi4+0x5e>
 80005ce:	443a      	add	r2, r7
 80005d0:	3802      	subs	r0, #2
 80005d2:	e6be      	b.n	8000352 <__udivmoddi4+0x8e>
 80005d4:	eba7 0808 	sub.w	r8, r7, r8
 80005d8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005dc:	4441      	add	r1, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c9      	b.n	800057c <__udivmoddi4+0x2b8>
 80005e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e744      	b.n	800047a <__udivmoddi4+0x1b6>
 80005f0:	3b02      	subs	r3, #2
 80005f2:	443c      	add	r4, r7
 80005f4:	e75e      	b.n	80004b4 <__udivmoddi4+0x1f0>
 80005f6:	4649      	mov	r1, r9
 80005f8:	e78d      	b.n	8000516 <__udivmoddi4+0x252>
 80005fa:	eba1 0108 	sub.w	r1, r1, r8
 80005fe:	46cc      	mov	ip, r9
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7b8      	b.n	800057c <__udivmoddi4+0x2b8>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fa2c 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f806 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f8b0 	bl	8000780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000620:	f000 f862 	bl	80006e8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x14>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09c      	sub	sp, #112	@ 0x70
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2250      	movs	r2, #80	@ 0x50
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f8f4 	bl	8006824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064e:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <SystemClock_Config+0xb8>)
 8000650:	691b      	ldr	r3, [r3, #16]
 8000652:	4a23      	ldr	r2, [pc, #140]	@ (80006e0 <SystemClock_Config+0xb8>)
 8000654:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000658:	6113      	str	r3, [r2, #16]
 800065a:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <SystemClock_Config+0xb8>)
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000666:	bf00      	nop
 8000668:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <SystemClock_Config+0xb8>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	2b08      	cmp	r3, #8
 8000672:	d1f9      	bne.n	8000668 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800067c:	2308      	movs	r3, #8
 800067e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2340      	movs	r3, #64	@ 0x40
 8000682:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fe41 	bl	8001314 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000698:	f000 f88c 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	231f      	movs	r3, #31
 800069e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fa62 	bl	8001b84 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006c6:	f000 f875 	bl	80007b4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <SystemClock_Config+0xbc>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <SystemClock_Config+0xbc>)
 80006d0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006d4:	6013      	str	r3, [r2, #0]
}
 80006d6:	bf00      	nop
 80006d8:	3770      	adds	r7, #112	@ 0x70
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	44020800 	.word	0x44020800
 80006e4:	40022000 	.word	0x40022000

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 80006ee:	4a23      	ldr	r2, [pc, #140]	@ (800077c <MX_USART2_UART_Init+0x94>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000732:	f004 ffed 	bl	8005710 <HAL_UART_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800073c:	f000 f83a 	bl	80007b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000744:	f005 ffa3 	bl	800668e <HAL_UARTEx_SetTxFifoThreshold>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800074e:	f000 f831 	bl	80007b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4808      	ldr	r0, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000756:	f005 ffd8 	bl	800670a <HAL_UARTEx_SetRxFifoThreshold>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000760:	f000 f828 	bl	80007b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_USART2_UART_Init+0x90>)
 8000766:	f005 ff59 	bl	800661c <HAL_UARTEx_DisableFifoMode>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000770:	f000 f820 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000028 	.word	0x20000028
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_GPIO_Init+0x30>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800078c:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <MX_GPIO_Init+0x30>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_GPIO_Init+0x30>)
 8000798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	44020c00 	.word	0x44020c00

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0be      	sub	sp, #248	@ 0xf8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	22d0      	movs	r2, #208	@ 0xd0
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f006 f817 	bl	8006824 <memset>
  if(huart->Instance==USART2)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a2a      	ldr	r2, [pc, #168]	@ (80008a4 <HAL_UART_MspInit+0xd4>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d14c      	bne.n	800089a <HAL_UART_MspInit+0xca>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000800:	f04f 0202 	mov.w	r2, #2
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800080c:	2300      	movs	r3, #0
 800080e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fcf7 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000820:	f7ff ffc8 	bl	80007b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <HAL_UART_MspInit+0xd8>)
 8000826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800082a:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <HAL_UART_MspInit+0xd8>)
 800082c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000830:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000834:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <HAL_UART_MspInit+0xd8>)
 8000836:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800083a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_UART_MspInit+0xd8>)
 8000844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000848:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_UART_MspInit+0xd8>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_UART_MspInit+0xd8>)
 8000854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000860:	230c      	movs	r3, #12
 8000862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000878:	2307      	movs	r3, #7
 800087a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000882:	4619      	mov	r1, r3
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <HAL_UART_MspInit+0xdc>)
 8000886:	f000 fbe7 	bl	8001058 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	203b      	movs	r0, #59	@ 0x3b
 8000890:	f000 fa64 	bl	8000d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000894:	203b      	movs	r0, #59	@ 0x3b
 8000896:	f000 fa7b 	bl	8000d90 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800089a:	bf00      	nop
 800089c:	37f8      	adds	r7, #248	@ 0xf8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	44020c00 	.word	0x44020c00
 80008ac:	42020000 	.word	0x42020000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f951 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <USART2_IRQHandler+0x10>)
 8000916:	f004 ff4b 	bl	80057b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000028 	.word	0x20000028

08000924 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800092a:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <SystemInit+0xdc>)
 800092c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000930:	4a33      	ldr	r2, [pc, #204]	@ (8000a00 <SystemInit+0xdc>)
 8000932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000936:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800093a:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <SystemInit+0xe0>)
 800093c:	2201      	movs	r2, #1
 800093e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <SystemInit+0xe0>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000946:	4b2f      	ldr	r3, [pc, #188]	@ (8000a04 <SystemInit+0xe0>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800094c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a04 <SystemInit+0xe0>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	492c      	ldr	r1, [pc, #176]	@ (8000a04 <SystemInit+0xe0>)
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <SystemInit+0xe4>)
 8000954:	4013      	ands	r3, r2
 8000956:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000958:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <SystemInit+0xe0>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800095e:	4b29      	ldr	r3, [pc, #164]	@ (8000a04 <SystemInit+0xe0>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <SystemInit+0xe0>)
 8000966:	2200      	movs	r2, #0
 8000968:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800096a:	4b26      	ldr	r3, [pc, #152]	@ (8000a04 <SystemInit+0xe0>)
 800096c:	4a27      	ldr	r2, [pc, #156]	@ (8000a0c <SystemInit+0xe8>)
 800096e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000970:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <SystemInit+0xe0>)
 8000972:	2200      	movs	r2, #0
 8000974:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <SystemInit+0xe0>)
 8000978:	4a24      	ldr	r2, [pc, #144]	@ (8000a0c <SystemInit+0xe8>)
 800097a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800097c:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <SystemInit+0xe0>)
 800097e:	2200      	movs	r2, #0
 8000980:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <SystemInit+0xe0>)
 8000984:	4a21      	ldr	r2, [pc, #132]	@ (8000a0c <SystemInit+0xe8>)
 8000986:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <SystemInit+0xe0>)
 800098a:	2200      	movs	r2, #0
 800098c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <SystemInit+0xe0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1c      	ldr	r2, [pc, #112]	@ (8000a04 <SystemInit+0xe0>)
 8000994:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000998:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <SystemInit+0xe0>)
 800099c:	2200      	movs	r2, #0
 800099e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <SystemInit+0xdc>)
 80009a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009a6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <SystemInit+0xec>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80009b0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80009b8:	d003      	beq.n	80009c2 <SystemInit+0x9e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80009c0:	d117      	bne.n	80009f2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <SystemInit+0xec>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d005      	beq.n	80009da <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <SystemInit+0xec>)
 80009d0:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <SystemInit+0xf0>)
 80009d2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <SystemInit+0xec>)
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <SystemInit+0xf4>)
 80009d8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <SystemInit+0xec>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a0c      	ldr	r2, [pc, #48]	@ (8000a10 <SystemInit+0xec>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <SystemInit+0xec>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a09      	ldr	r2, [pc, #36]	@ (8000a10 <SystemInit+0xec>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	61d3      	str	r3, [r2, #28]
  }
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	44020c00 	.word	0x44020c00
 8000a08:	eae2eae3 	.word	0xeae2eae3
 8000a0c:	01010280 	.word	0x01010280
 8000a10:	40022000 	.word	0x40022000
 8000a14:	08192a3b 	.word	0x08192a3b
 8000a18:	4c5d6e7f 	.word	0x4c5d6e7f

08000a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a1c:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a20:	f7ff ff80 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	@ (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a4a:	f005 fef3 	bl	8006834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff fddf 	bl	8000610 <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   r0, =_estack
 8000a54:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a60:	080068e4 	.word	0x080068e4
  ldr r2, =_sbss
 8000a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a68:	200000c0 	.word	0x200000c0

08000a6c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f966 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a7a:	f001 fa3b 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <HAL_Init+0x44>)
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	f003 030f 	and.w	r3, r3, #15
 8000a88:	490b      	ldr	r1, [pc, #44]	@ (8000ab8 <HAL_Init+0x48>)
 8000a8a:	5ccb      	ldrb	r3, [r1, r3]
 8000a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a90:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <HAL_Init+0x4c>)
 8000a92:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000a94:	2004      	movs	r0, #4
 8000a96:	f000 f9ab 	bl	8000df0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f810 	bl	8000ac0 <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e002      	b.n	8000ab0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aaa:	f7ff fe89 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	44020c00 	.word	0x44020c00
 8000ab8:	08006894 	.word	0x08006894
 8000abc:	20000000 	.word	0x20000000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000acc:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <HAL_InitTick+0xdc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e05c      	b.n	8000b92 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000ad8:	4b31      	ldr	r3, [pc, #196]	@ (8000ba0 <HAL_InitTick+0xe0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d10c      	bne.n	8000afe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba4 <HAL_InitTick+0xe4>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <HAL_InitTick+0xdc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e037      	b.n	8000b6e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000afe:	f000 f9cf 	bl	8000ea0 <HAL_SYSTICK_GetCLKSourceConfig>
 8000b02:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d023      	beq.n	8000b52 <HAL_InitTick+0x92>
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d82d      	bhi.n	8000b6c <HAL_InitTick+0xac>
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_InitTick+0x5e>
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d00d      	beq.n	8000b38 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000b1c:	e026      	b.n	8000b6c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <HAL_InitTick+0xe4>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <HAL_InitTick+0xdc>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000b2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	60fb      	str	r3, [r7, #12]
        break;
 8000b36:	e01a      	b.n	8000b6e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_InitTick+0xdc>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b46:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	60fb      	str	r3, [r7, #12]
        break;
 8000b50:	e00d      	b.n	8000b6e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_InitTick+0xdc>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b68:	60fb      	str	r3, [r7, #12]
        break;
 8000b6a:	e000      	b.n	8000b6e <HAL_InitTick+0xae>
        break;
 8000b6c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f000 f91c 	bl	8000dac <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e009      	b.n	8000b92 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	f000 f8e9 	bl	8000d5c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000b8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_InitTick+0xe8>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	e000e010 	.word	0xe000e010
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	200000bc 	.word	0x200000bc

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200000bc 	.word	0x200000bc

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	@ (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6a:	f7ff ff63 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f7ff ffb3 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff82 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff56 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00d      	b.n	8000dde <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_SYSTICK_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_SYSTICK_Config+0x40>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_SYSTICK_Config+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <HAL_SYSTICK_Config+0x40>)
 8000dd6:	f043 0303 	orr.w	r3, r3, #3
 8000dda:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d844      	bhi.n	8000e88 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8000e04 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000e27 	.word	0x08000e27
 8000e08:	08000e45 	.word	0x08000e45
 8000e0c:	08000e67 	.word	0x08000e67
 8000e10:	08000e89 	.word	0x08000e89
 8000e14:	08000e19 	.word	0x08000e19
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6013      	str	r3, [r2, #0]
      break;
 8000e24:	e031      	b.n	8000e8a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e2c:	f023 0304 	bic.w	r3, r3, #4
 8000e30:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e38:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e3a:	f023 030c 	bic.w	r3, r3, #12
 8000e3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e42:	e022      	b.n	8000e8a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a13      	ldr	r2, [pc, #76]	@ (8000e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e4a:	f023 0304 	bic.w	r3, r3, #4
 8000e4e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e56:	f023 030c 	bic.w	r3, r3, #12
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e64:	e011      	b.n	8000e8a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e66:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e6c:	f023 0304 	bic.w	r3, r3, #4
 8000e70:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000e78:	f023 030c 	bic.w	r3, r3, #12
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000e86:	e000      	b.n	8000e8a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000e88:	bf00      	nop
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010
 8000e9c:	44020c00 	.word	0x44020c00

08000ea0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e01e      	b.n	8000ef6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000eba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d00f      	beq.n	8000eea <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d80f      	bhi.n	8000ef0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d003      	beq.n	8000ee4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000edc:	e008      	b.n	8000ef0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
        break;
 8000ee2:	e008      	b.n	8000ef6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
        break;
 8000ee8:	e005      	b.n	8000ef6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000eea:	2302      	movs	r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
        break;
 8000eee:	e002      	b.n	8000ef6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
        break;
 8000ef4:	bf00      	nop
    }
  }
  return systick_source;
 8000ef6:	687b      	ldr	r3, [r7, #4]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e010 	.word	0xe000e010
 8000f08:	44020c00 	.word	0x44020c00

08000f0c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8000f14:	f7ff fe5e 	bl	8000bd4 <HAL_GetTick>
 8000f18:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e06b      	b.n	8000ffc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d008      	beq.n	8000f42 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2220      	movs	r2, #32
 8000f34:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e05c      	b.n	8000ffc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 0204 	orr.w	r2, r2, #4
 8000f50:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000f5a:	e020      	b.n	8000f9e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8000f5c:	f7ff fe3a 	bl	8000bd4 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b05      	cmp	r3, #5
 8000f68:	d919      	bls.n	8000f9e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6e:	f043 0210 	orr.w	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f8e:	2201      	movs	r2, #1
 8000f90:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e02e      	b.n	8000ffc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0d7      	beq.n	8000f5c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0202 	orr.w	r2, r2, #2
 8000fba:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8000fcc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e019      	b.n	800104a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d004      	beq.n	800102c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2220      	movs	r2, #32
 8001026:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e00e      	b.n	800104a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2204      	movs	r2, #4
 8001030:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001066:	e142      	b.n	80012ee <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	2101      	movs	r1, #1
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8134 	beq.w	80012e8 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x38>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b12      	cmp	r3, #18
 800108e:	d125      	bne.n	80010dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	f003 020f 	and.w	r2, r3, #15
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	6979      	ldr	r1, [r7, #20]
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4013      	ands	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4313      	orrs	r3, r2
 8001108:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d00b      	beq.n	8001130 <HAL_GPIO_Init+0xd8>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001124:	2b11      	cmp	r3, #17
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b12      	cmp	r3, #18
 800112e:	d130      	bne.n	8001192 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001166:	2201      	movs	r2, #1
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	4013      	ands	r3, r2
 8001174:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	f003 0201 	and.w	r2, r3, #1
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4313      	orrs	r3, r2
 800118a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b03      	cmp	r3, #3
 800119c:	d109      	bne.n	80011b2 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d11b      	bne.n	80011e2 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d017      	beq.n	80011e2 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4013      	ands	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d07c      	beq.n	80012e8 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011ee:	4a47      	ldr	r2, [pc, #284]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3318      	adds	r3, #24
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4013      	ands	r3, r2
 8001210:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	0a9a      	lsrs	r2, r3, #10
 8001216:	4b3e      	ldr	r3, [pc, #248]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 8001218:	4013      	ands	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	00d2      	lsls	r2, r2, #3
 8001222:	4093      	lsls	r3, r2
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	4313      	orrs	r3, r2
 8001228:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800122a:	4938      	ldr	r1, [pc, #224]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3318      	adds	r3, #24
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001238:	4b34      	ldr	r3, [pc, #208]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800125c:	4a2b      	ldr	r2, [pc, #172]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4013      	ands	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001286:	4a21      	ldr	r2, [pc, #132]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 800128e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001292:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4013      	ands	r3, r2
 800129c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80012b2:	4a16      	ldr	r2, [pc, #88]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 80012bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4013      	ands	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80012e0:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	3301      	adds	r3, #1
 80012ec:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f47f aeb5 	bne.w	8001068 <HAL_GPIO_Init+0x10>
  }
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	44022000 	.word	0x44022000
 8001310:	002f7f7f 	.word	0x002f7f7f

08001314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f000 bc28 	b.w	8001b78 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001328:	4b94      	ldr	r3, [pc, #592]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f003 0318 	and.w	r3, r3, #24
 8001330:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001332:	4b92      	ldr	r3, [pc, #584]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	d05b      	beq.n	8001400 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b08      	cmp	r3, #8
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x46>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b18      	cmp	r3, #24
 8001352:	d114      	bne.n	800137e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d111      	bne.n	800137e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	f000 bc08 	b.w	8001b78 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001368:	4b84      	ldr	r3, [pc, #528]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	4981      	ldr	r1, [pc, #516]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001378:	4313      	orrs	r3, r2
 800137a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800137c:	e040      	b.n	8001400 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d023      	beq.n	80013ce <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001386:	4b7d      	ldr	r3, [pc, #500]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7c      	ldr	r2, [pc, #496]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fc1f 	bl	8000bd4 <HAL_GetTick>
 8001396:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800139a:	f7ff fc1b 	bl	8000bd4 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e3e5      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80013ac:	4b73      	ldr	r3, [pc, #460]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80013b8:	4b70      	ldr	r3, [pc, #448]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	041b      	lsls	r3, r3, #16
 80013c6:	496d      	ldr	r1, [pc, #436]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	618b      	str	r3, [r1, #24]
 80013cc:	e018      	b.n	8001400 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013ce:	4b6b      	ldr	r3, [pc, #428]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a6a      	ldr	r2, [pc, #424]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80013d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fbfb 	bl	8000bd4 <HAL_GetTick>
 80013de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80013e2:	f7ff fbf7 	bl	8000bd4 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e3c1      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80013f4:	4b61      	ldr	r3, [pc, #388]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a0 	beq.w	800154e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	2b10      	cmp	r3, #16
 8001412:	d005      	beq.n	8001420 <HAL_RCC_OscConfig+0x10c>
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b18      	cmp	r3, #24
 8001418:	d109      	bne.n	800142e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f040 8092 	bne.w	800154e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e3a4      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x132>
 8001438:	4b50      	ldr	r3, [pc, #320]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a4f      	ldr	r2, [pc, #316]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800143e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e058      	b.n	80014f8 <HAL_RCC_OscConfig+0x1e4>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d112      	bne.n	8001474 <HAL_RCC_OscConfig+0x160>
 800144e:	4b4b      	ldr	r3, [pc, #300]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a4a      	ldr	r2, [pc, #296]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b48      	ldr	r3, [pc, #288]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a47      	ldr	r2, [pc, #284]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001460:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b45      	ldr	r3, [pc, #276]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a44      	ldr	r2, [pc, #272]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800146c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e041      	b.n	80014f8 <HAL_RCC_OscConfig+0x1e4>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x190>
 800147e:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a3e      	ldr	r2, [pc, #248]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a3b      	ldr	r2, [pc, #236]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001490:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b39      	ldr	r3, [pc, #228]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a38      	ldr	r2, [pc, #224]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e029      	b.n	80014f8 <HAL_RCC_OscConfig+0x1e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80014ac:	d112      	bne.n	80014d4 <HAL_RCC_OscConfig+0x1c0>
 80014ae:	4b33      	ldr	r3, [pc, #204]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a32      	ldr	r2, [pc, #200]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b30      	ldr	r3, [pc, #192]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2f      	ldr	r2, [pc, #188]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2c      	ldr	r2, [pc, #176]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e011      	b.n	80014f8 <HAL_RCC_OscConfig+0x1e4>
 80014d4:	4b29      	ldr	r3, [pc, #164]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a28      	ldr	r2, [pc, #160]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b26      	ldr	r3, [pc, #152]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a25      	ldr	r2, [pc, #148]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b23      	ldr	r3, [pc, #140]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a22      	ldr	r2, [pc, #136]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 80014f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fb68 	bl	8000bd4 <HAL_GetTick>
 8001504:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001508:	f7ff fb64 	bl	8000bd4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e32e      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x1f4>
 8001526:	e012      	b.n	800154e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fb54 	bl	8000bd4 <HAL_GetTick>
 800152c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001530:	f7ff fb50 	bl	8000bd4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	@ 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e31a      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_RCC_OscConfig+0x268>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 809a 	beq.w	8001690 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x25a>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	2b18      	cmp	r3, #24
 8001566:	d149      	bne.n	80015fc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d146      	bne.n	80015fc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d104      	bne.n	8001580 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e2fe      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
 800157a:	bf00      	nop
 800157c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001586:	4b9a      	ldr	r3, [pc, #616]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0218 	and.w	r2, r3, #24
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	429a      	cmp	r2, r3
 8001594:	d014      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001596:	4b96      	ldr	r3, [pc, #600]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0218 	bic.w	r2, r3, #24
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	4993      	ldr	r1, [pc, #588]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80015a8:	f000 fdd0 	bl	800214c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015ac:	4b91      	ldr	r3, [pc, #580]	@ (80017f4 <HAL_RCC_OscConfig+0x4e0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fa85 	bl	8000ac0 <HAL_InitTick>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e2db      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb08 	bl	8000bd4 <HAL_GetTick>
 80015c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fb04 	bl	8000bd4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e2ce      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015da:	4b85      	ldr	r3, [pc, #532]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80015e6:	4b82      	ldr	r3, [pc, #520]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	041b      	lsls	r3, r3, #16
 80015f4:	497e      	ldr	r1, [pc, #504]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80015fa:	e049      	b.n	8001690 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d02c      	beq.n	800165e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001604:	4b7a      	ldr	r3, [pc, #488]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 0218 	bic.w	r2, r3, #24
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4977      	ldr	r1, [pc, #476]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001616:	4b76      	ldr	r3, [pc, #472]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a75      	ldr	r2, [pc, #468]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fad7 	bl	8000bd4 <HAL_GetTick>
 8001626:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800162a:	f7ff fad3 	bl	8000bd4 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e29d      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800163c:	4b6c      	ldr	r3, [pc, #432]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001648:	4b69      	ldr	r3, [pc, #420]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	4966      	ldr	r1, [pc, #408]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001658:	4313      	orrs	r3, r2
 800165a:	610b      	str	r3, [r1, #16]
 800165c:	e018      	b.n	8001690 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b64      	ldr	r3, [pc, #400]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff fab3 	bl	8000bd4 <HAL_GetTick>
 800166e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001672:	f7ff faaf 	bl	8000bd4 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e279      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001684:	4b5a      	ldr	r3, [pc, #360]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d03c      	beq.n	8001716 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01c      	beq.n	80016de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a4:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80016a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016aa:	4a51      	ldr	r2, [pc, #324]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80016ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fa8e 	bl	8000bd4 <HAL_GetTick>
 80016b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fa8a 	bl	8000bd4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e254      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016ce:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80016d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ef      	beq.n	80016bc <HAL_RCC_OscConfig+0x3a8>
 80016dc:	e01b      	b.n	8001716 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80016e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016e4:	4a42      	ldr	r2, [pc, #264]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80016e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80016ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fa71 	bl	8000bd4 <HAL_GetTick>
 80016f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fa6d 	bl	8000bd4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e237      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001708:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 800170a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800170e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ef      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80d2 	beq.w	80018c8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <HAL_RCC_OscConfig+0x4e4>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d118      	bne.n	8001762 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001730:	4b31      	ldr	r3, [pc, #196]	@ (80017f8 <HAL_RCC_OscConfig+0x4e4>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	4a30      	ldr	r2, [pc, #192]	@ (80017f8 <HAL_RCC_OscConfig+0x4e4>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173c:	f7ff fa4a 	bl	8000bd4 <HAL_GetTick>
 8001740:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001744:	f7ff fa46 	bl	8000bd4 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e210      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001756:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_RCC_OscConfig+0x4e4>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x468>
 800176a:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 800176c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001770:	4a1f      	ldr	r2, [pc, #124]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800177a:	e074      	b.n	8001866 <HAL_RCC_OscConfig+0x552>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d118      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4a2>
 8001784:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800178a:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 8001796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800179a:	4a15      	ldr	r2, [pc, #84]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 800179c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80017a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017aa:	4a11      	ldr	r2, [pc, #68]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017b4:	e057      	b.n	8001866 <HAL_RCC_OscConfig+0x552>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d11e      	bne.n	80017fc <HAL_RCC_OscConfig+0x4e8>
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80017c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80017d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d4:	4a06      	ldr	r2, [pc, #24]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80017d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017de:	4b04      	ldr	r3, [pc, #16]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e4:	4a02      	ldr	r2, [pc, #8]	@ (80017f0 <HAL_RCC_OscConfig+0x4dc>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017ee:	e03a      	b.n	8001866 <HAL_RCC_OscConfig+0x552>
 80017f0:	44020c00 	.word	0x44020c00
 80017f4:	20000004 	.word	0x20000004
 80017f8:	44020800 	.word	0x44020800
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b85      	cmp	r3, #133	@ 0x85
 8001802:	d118      	bne.n	8001836 <HAL_RCC_OscConfig+0x522>
 8001804:	4ba2      	ldr	r3, [pc, #648]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800180a:	4aa1      	ldr	r2, [pc, #644]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001814:	4b9e      	ldr	r3, [pc, #632]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800181a:	4a9d      	ldr	r2, [pc, #628]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001820:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001824:	4b9a      	ldr	r3, [pc, #616]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800182a:	4a99      	ldr	r2, [pc, #612]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001834:	e017      	b.n	8001866 <HAL_RCC_OscConfig+0x552>
 8001836:	4b96      	ldr	r3, [pc, #600]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800183c:	4a94      	ldr	r2, [pc, #592]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001846:	4b92      	ldr	r3, [pc, #584]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800184c:	4a90      	ldr	r2, [pc, #576]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001856:	4b8e      	ldr	r3, [pc, #568]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800185c:	4a8c      	ldr	r2, [pc, #560]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 800185e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001862:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d016      	beq.n	800189c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff f9b1 	bl	8000bd4 <HAL_GetTick>
 8001872:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001874:	e00a      	b.n	800188c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff f9ad 	bl	8000bd4 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e175      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800188c:	4b80      	ldr	r3, [pc, #512]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 800188e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0ed      	beq.n	8001876 <HAL_RCC_OscConfig+0x562>
 800189a:	e015      	b.n	80018c8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff f99a 	bl	8000bd4 <HAL_GetTick>
 80018a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff f996 	bl	8000bd4 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e15e      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ba:	4b75      	ldr	r3, [pc, #468]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80018bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ed      	bne.n	80018a4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0320 	and.w	r3, r3, #32
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d036      	beq.n	8001942 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d019      	beq.n	8001910 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80018e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff f974 	bl	8000bd4 <HAL_GetTick>
 80018ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80018f0:	f7ff f970 	bl	8000bd4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e13a      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001902:	4b63      	ldr	r3, [pc, #396]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x5dc>
 800190e:	e018      	b.n	8001942 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001910:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a5e      	ldr	r2, [pc, #376]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800191a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7ff f95a 	bl	8000bd4 <HAL_GetTick>
 8001920:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001924:	f7ff f956 	bl	8000bd4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e120      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001936:	4b56      	ldr	r3, [pc, #344]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8115 	beq.w	8001b76 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b18      	cmp	r3, #24
 8001950:	f000 80af 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001958:	2b02      	cmp	r3, #2
 800195a:	f040 8086 	bne.w	8001a6a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800195e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a4b      	ldr	r2, [pc, #300]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001964:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff f933 	bl	8000bd4 <HAL_GetTick>
 800196e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001972:	f7ff f92f 	bl	8000bd4 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0f9      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001984:	4b42      	ldr	r3, [pc, #264]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001990:	4b3f      	ldr	r3, [pc, #252]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001994:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001998:	f023 0303 	bic.w	r3, r3, #3
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019a4:	0212      	lsls	r2, r2, #8
 80019a6:	430a      	orrs	r2, r1
 80019a8:	4939      	ldr	r1, [pc, #228]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019bc:	3b01      	subs	r3, #1
 80019be:	025b      	lsls	r3, r3, #9
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c8:	3b01      	subs	r3, #1
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	3b01      	subs	r3, #1
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80019de:	492c      	ldr	r1, [pc, #176]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80019e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	4a29      	ldr	r2, [pc, #164]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80019ea:	f023 0310 	bic.w	r3, r3, #16
 80019ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80019fa:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	4a24      	ldr	r2, [pc, #144]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001a06:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	f023 020c 	bic.w	r2, r3, #12
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	491f      	ldr	r1, [pc, #124]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	f023 0220 	bic.w	r2, r3, #32
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a24:	491a      	ldr	r1, [pc, #104]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a2a:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2e:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a34:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f8c7 	bl	8000bd4 <HAL_GetTick>
 8001a46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f8c3 	bl	8000bd4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e08d      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x736>
 8001a68:	e085      	b.n	8001b76 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a08      	ldr	r2, [pc, #32]	@ (8001a90 <HAL_RCC_OscConfig+0x77c>)
 8001a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f8ad 	bl	8000bd4 <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f8a9 	bl	8000bd4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d903      	bls.n	8001a94 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e073      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
 8001a90:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a94:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ee      	bne.n	8001a7e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001aa0:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa4:	4a36      	ldr	r2, [pc, #216]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001aa6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	6293      	str	r3, [r2, #40]	@ 0x28
 8001ab0:	e061      	b.n	8001b76 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ab2:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ab8:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001abc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d031      	beq.n	8001b2a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d12a      	bne.n	8001b2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d122      	bne.n	8001b2a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d11a      	bne.n	8001b2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	0a5b      	lsrs	r3, r3, #9
 8001af8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b00:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d111      	bne.n	8001b2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	0c1b      	lsrs	r3, r3, #16
 8001b0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b12:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d108      	bne.n	8001b2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	0e1b      	lsrs	r3, r3, #24
 8001b1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e024      	b.n	8001b78 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b2e:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b32:	08db      	lsrs	r3, r3, #3
 8001b34:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d01a      	beq.n	8001b76 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001b40:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001b46:	f023 0310 	bic.w	r3, r3, #16
 8001b4a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f842 	bl	8000bd4 <HAL_GetTick>
 8001b50:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001b52:	bf00      	nop
 8001b54:	f7ff f83e 	bl	8000bd4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d0f9      	beq.n	8001b54 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b64:	4a06      	ldr	r2, [pc, #24]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001b6a:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <HAL_RCC_OscConfig+0x86c>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	44020c00 	.word	0x44020c00

08001b84 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e19e      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b83      	ldr	r3, [pc, #524]	@ (8001da8 <HAL_RCC_ClockConfig+0x224>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b80      	ldr	r3, [pc, #512]	@ (8001da8 <HAL_RCC_ClockConfig+0x224>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	497e      	ldr	r1, [pc, #504]	@ (8001da8 <HAL_RCC_ClockConfig+0x224>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8001da8 <HAL_RCC_ClockConfig+0x224>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e186      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	4b74      	ldr	r3, [pc, #464]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d909      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001be6:	4b71      	ldr	r3, [pc, #452]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	496d      	ldr	r1, [pc, #436]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d012      	beq.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	4b68      	ldr	r3, [pc, #416]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d909      	bls.n	8001c2c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001c18:	4b64      	ldr	r3, [pc, #400]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4961      	ldr	r1, [pc, #388]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d908      	bls.n	8001c5a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001c48:	4b58      	ldr	r3, [pc, #352]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4955      	ldr	r1, [pc, #340]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	4b50      	ldr	r3, [pc, #320]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d908      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001c76:	4b4d      	ldr	r3, [pc, #308]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	f023 020f 	bic.w	r2, r3, #15
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	494a      	ldr	r1, [pc, #296]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8093 	beq.w	8001dbc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001c9e:	4b43      	ldr	r3, [pc, #268]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d121      	bne.n	8001cee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e113      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e107      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001cce:	4b37      	ldr	r3, [pc, #220]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0fb      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cde:	4b33      	ldr	r3, [pc, #204]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0f3      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001cee:	4b2f      	ldr	r3, [pc, #188]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	492c      	ldr	r1, [pc, #176]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d00:	f7fe ff68 	bl	8000bd4 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d112      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7fe ff60 	bl	8000bd4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0d7      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d26:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 0318 	and.w	r3, r3, #24
 8001d2e:	2b18      	cmp	r3, #24
 8001d30:	d1ee      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x18c>
 8001d32:	e043      	b.n	8001dbc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d112      	bne.n	8001d62 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3e:	f7fe ff49 	bl	8000bd4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0c0      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d54:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f003 0318 	and.w	r3, r3, #24
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d1ee      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x1ba>
 8001d60:	e02c      	b.n	8001dbc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d122      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7fe ff32 	bl	8000bd4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0a9      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_RCC_ClockConfig+0x228>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 0318 	and.w	r3, r3, #24
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d1ee      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x1e8>
 8001d8e:	e015      	b.n	8001dbc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7fe ff20 	bl	8000bd4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d906      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e097      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
 8001da6:	bf00      	nop
 8001da8:	40022000 	.word	0x40022000
 8001dac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f003 0318 	and.w	r3, r3, #24
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e9      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d010      	beq.n	8001dea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4b44      	ldr	r3, [pc, #272]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d208      	bcs.n	8001dea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001dd8:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f023 020f 	bic.w	r2, r3, #15
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	493e      	ldr	r1, [pc, #248]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dea:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee4 <HAL_RCC_ClockConfig+0x360>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d210      	bcs.n	8001e1a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee4 <HAL_RCC_ClockConfig+0x360>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 020f 	bic.w	r2, r3, #15
 8001e00:	4938      	ldr	r1, [pc, #224]	@ (8001ee4 <HAL_RCC_ClockConfig+0x360>)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e08:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <HAL_RCC_ClockConfig+0x360>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e05d      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d010      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d208      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001e36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4927      	ldr	r1, [pc, #156]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d012      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d209      	bcs.n	8001e7a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001e66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	491a      	ldr	r1, [pc, #104]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d012      	beq.n	8001eac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d209      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	490e      	ldr	r1, [pc, #56]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001eac:	f000 f822 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_RCC_ClockConfig+0x35c>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	490b      	ldr	r1, [pc, #44]	@ (8001ee8 <HAL_RCC_ClockConfig+0x364>)
 8001ebc:	5ccb      	ldrb	r3, [r1, r3]
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <HAL_RCC_ClockConfig+0x368>)
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <HAL_RCC_ClockConfig+0x36c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fdf8 	bl	8000ac0 <HAL_InitTick>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	44020c00 	.word	0x44020c00
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	08006894 	.word	0x08006894
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	@ 0x24
 8001ef8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001efa:	4b8c      	ldr	r3, [pc, #560]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 0318 	and.w	r3, r3, #24
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f06:	4b8a      	ldr	r3, [pc, #552]	@ (8002130 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e107      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0c:	4b87      	ldr	r3, [pc, #540]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f003 0318 	and.w	r3, r3, #24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d112      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001f18:	4b84      	ldr	r3, [pc, #528]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d009      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001f24:	4b81      	ldr	r3, [pc, #516]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	4a81      	ldr	r2, [pc, #516]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e0f1      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001f38:	4b7e      	ldr	r3, [pc, #504]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	e0ee      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f3e:	4b7b      	ldr	r3, [pc, #492]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0318 	and.w	r3, r3, #24
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x244>)
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e0e5      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f50:	4b76      	ldr	r3, [pc, #472]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f003 0318 	and.w	r3, r3, #24
 8001f58:	2b18      	cmp	r3, #24
 8001f5a:	f040 80dd 	bne.w	8002118 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001f5e:	4b73      	ldr	r3, [pc, #460]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001f68:	4b70      	ldr	r3, [pc, #448]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001f74:	4b6d      	ldr	r3, [pc, #436]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001f80:	4b6a      	ldr	r3, [pc, #424]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001f84:	08db      	lsrs	r3, r3, #3
 8001f86:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f98:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80b7 	beq.w	8002112 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d003      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d056      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x16a>
 8001fb0:	e077      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001fb2:	4b5e      	ldr	r3, [pc, #376]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d02d      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x240>)
 8001fca:	fa22 f303 	lsr.w	r3, r2, r3
 8001fce:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fe8:	4b50      	ldr	r3, [pc, #320]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8001fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ff8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ffc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800213c <HAL_RCC_GetSysClockFreq+0x248>
 8002000:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002004:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800200c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002018:	e065      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002024:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002140 <HAL_RCC_GetSysClockFreq+0x24c>
 8002028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800202c:	4b3f      	ldr	r3, [pc, #252]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 800202e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800203c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002040:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800213c <HAL_RCC_GetSysClockFreq+0x248>
 8002044:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002048:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800204c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002050:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800205c:	e043      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002068:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002144 <HAL_RCC_GetSysClockFreq+0x250>
 800206c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002070:	4b2e      	ldr	r3, [pc, #184]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 8002072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002080:	ed97 6a02 	vldr	s12, [r7, #8]
 8002084:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800213c <HAL_RCC_GetSysClockFreq+0x248>
 8002088:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800208c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002090:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002094:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80020a0:	e021      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	ee07 3a90 	vmov	s15, r3
 80020a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ac:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002148 <HAL_RCC_GetSysClockFreq+0x254>
 80020b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 80020b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800213c <HAL_RCC_GetSysClockFreq+0x248>
 80020cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80020d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80020e4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_RCC_GetSysClockFreq+0x238>)
 80020e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ea:	0a5b      	lsrs	r3, r3, #9
 80020ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020f0:	3301      	adds	r3, #1
 80020f2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800210a:	ee17 3a90 	vmov	r3, s15
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	e004      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e001      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x240>)
 800211a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800211c:	69fb      	ldr	r3, [r7, #28]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	44020c00 	.word	0x44020c00
 8002130:	003d0900 	.word	0x003d0900
 8002134:	03d09000 	.word	0x03d09000
 8002138:	017d7840 	.word	0x017d7840
 800213c:	46000000 	.word	0x46000000
 8002140:	4c742400 	.word	0x4c742400
 8002144:	4bbebc20 	.word	0x4bbebc20
 8002148:	4a742400 	.word	0x4a742400

0800214c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002150:	f7ff fed0 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800215a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800215e:	4907      	ldr	r1, [pc, #28]	@ (800217c <HAL_RCC_GetHCLKFreq+0x30>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002162:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <HAL_RCC_GetHCLKFreq+0x34>)
 800216c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800216e:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <HAL_RCC_GetHCLKFreq+0x34>)
 8002170:	681b      	ldr	r3, [r3, #0]
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	44020c00 	.word	0x44020c00
 800217c:	08006894 	.word	0x08006894
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002188:	f7ff ffe0 	bl	800214c <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4904      	ldr	r1, [pc, #16]	@ (80021ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	44020c00 	.word	0x44020c00
 80021ac:	080068a4 	.word	0x080068a4

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80021b4:	f7ff ffca 	bl	800214c <HAL_RCC_GetHCLKFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	4904      	ldr	r1, [pc, #16]	@ (80021d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	44020c00 	.word	0x44020c00
 80021d8:	080068a4 	.word	0x080068a4

080021dc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80021e0:	f7ff ffb4 	bl	800214c <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_RCC_GetPCLK3Freq+0x24>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	0b1b      	lsrs	r3, r3, #12
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4904      	ldr	r1, [pc, #16]	@ (8002204 <HAL_RCC_GetPCLK3Freq+0x28>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	44020c00 	.word	0x44020c00
 8002204:	080068a4 	.word	0x080068a4

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800220c:	b0ba      	sub	sp, #232	@ 0xe8
 800220e:	af00      	add	r7, sp, #0
 8002210:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002214:	2300      	movs	r3, #0
 8002216:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800221a:	2300      	movs	r3, #0
 800221c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800222c:	2500      	movs	r5, #0
 800222e:	ea54 0305 	orrs.w	r3, r4, r5
 8002232:	d00b      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002234:	4bcd      	ldr	r3, [pc, #820]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800223a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800223e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	4ac9      	ldr	r2, [pc, #804]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002246:	430b      	orrs	r3, r1
 8002248:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f002 0801 	and.w	r8, r2, #1
 8002258:	f04f 0900 	mov.w	r9, #0
 800225c:	ea58 0309 	orrs.w	r3, r8, r9
 8002260:	d042      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	2b05      	cmp	r3, #5
 800226a:	d823      	bhi.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800226c:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	080022bd 	.word	0x080022bd
 8002278:	0800228d 	.word	0x0800228d
 800227c:	080022a1 	.word	0x080022a1
 8002280:	080022bd 	.word	0x080022bd
 8002284:	080022bd 	.word	0x080022bd
 8002288:	080022bd 	.word	0x080022bd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800228c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002290:	3308      	adds	r3, #8
 8002292:	4618      	mov	r0, r3
 8002294:	f003 f90c 	bl	80054b0 <RCCEx_PLL2_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800229e:	e00e      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80022a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022a4:	3330      	adds	r3, #48	@ 0x30
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 f99a 	bl	80055e0 <RCCEx_PLL3_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80022b2:	e004      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80022ba:	e000      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80022bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80022c6:	4ba9      	ldr	r3, [pc, #676]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022cc:	f023 0107 	bic.w	r1, r3, #7
 80022d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d6:	4aa5      	ldr	r2, [pc, #660]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022d8:	430b      	orrs	r3, r1
 80022da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022de:	e003      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80022e4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f002 0a02 	and.w	sl, r2, #2
 80022f4:	f04f 0b00 	mov.w	fp, #0
 80022f8:	ea5a 030b 	orrs.w	r3, sl, fp
 80022fc:	f000 8088 	beq.w	8002410 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002306:	2b28      	cmp	r3, #40	@ 0x28
 8002308:	d868      	bhi.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800230a:	a201      	add	r2, pc, #4	@ (adr r2, 8002310 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	080023e5 	.word	0x080023e5
 8002314:	080023dd 	.word	0x080023dd
 8002318:	080023dd 	.word	0x080023dd
 800231c:	080023dd 	.word	0x080023dd
 8002320:	080023dd 	.word	0x080023dd
 8002324:	080023dd 	.word	0x080023dd
 8002328:	080023dd 	.word	0x080023dd
 800232c:	080023dd 	.word	0x080023dd
 8002330:	080023b5 	.word	0x080023b5
 8002334:	080023dd 	.word	0x080023dd
 8002338:	080023dd 	.word	0x080023dd
 800233c:	080023dd 	.word	0x080023dd
 8002340:	080023dd 	.word	0x080023dd
 8002344:	080023dd 	.word	0x080023dd
 8002348:	080023dd 	.word	0x080023dd
 800234c:	080023dd 	.word	0x080023dd
 8002350:	080023c9 	.word	0x080023c9
 8002354:	080023dd 	.word	0x080023dd
 8002358:	080023dd 	.word	0x080023dd
 800235c:	080023dd 	.word	0x080023dd
 8002360:	080023dd 	.word	0x080023dd
 8002364:	080023dd 	.word	0x080023dd
 8002368:	080023dd 	.word	0x080023dd
 800236c:	080023dd 	.word	0x080023dd
 8002370:	080023e5 	.word	0x080023e5
 8002374:	080023dd 	.word	0x080023dd
 8002378:	080023dd 	.word	0x080023dd
 800237c:	080023dd 	.word	0x080023dd
 8002380:	080023dd 	.word	0x080023dd
 8002384:	080023dd 	.word	0x080023dd
 8002388:	080023dd 	.word	0x080023dd
 800238c:	080023dd 	.word	0x080023dd
 8002390:	080023e5 	.word	0x080023e5
 8002394:	080023dd 	.word	0x080023dd
 8002398:	080023dd 	.word	0x080023dd
 800239c:	080023dd 	.word	0x080023dd
 80023a0:	080023dd 	.word	0x080023dd
 80023a4:	080023dd 	.word	0x080023dd
 80023a8:	080023dd 	.word	0x080023dd
 80023ac:	080023dd 	.word	0x080023dd
 80023b0:	080023e5 	.word	0x080023e5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80023b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023b8:	3308      	adds	r3, #8
 80023ba:	4618      	mov	r0, r3
 80023bc:	f003 f878 	bl	80054b0 <RCCEx_PLL2_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80023c6:	e00e      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80023c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023cc:	3330      	adds	r3, #48	@ 0x30
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 f906 	bl	80055e0 <RCCEx_PLL3_Config>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 80023da:	e004      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80023e2:	e000      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80023e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80023ee:	4b5f      	ldr	r3, [pc, #380]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80023f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fe:	4a5b      	ldr	r2, [pc, #364]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002400:	430b      	orrs	r3, r1
 8002402:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002406:	e003      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002408:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800240c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f002 0304 	and.w	r3, r2, #4
 800241c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800242a:	460b      	mov	r3, r1
 800242c:	4313      	orrs	r3, r2
 800242e:	d04e      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002436:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800243a:	d02c      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800243c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002440:	d825      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002446:	d028      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800244c:	d81f      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800244e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002450:	d025      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002452:	2bc0      	cmp	r3, #192	@ 0xc0
 8002454:	d81b      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002456:	2b80      	cmp	r3, #128	@ 0x80
 8002458:	d00f      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800245a:	2b80      	cmp	r3, #128	@ 0x80
 800245c:	d817      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01f      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002462:	2b40      	cmp	r3, #64	@ 0x40
 8002464:	d113      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800246a:	3308      	adds	r3, #8
 800246c:	4618      	mov	r0, r3
 800246e:	f003 f81f 	bl	80054b0 <RCCEx_PLL2_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002478:	e014      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800247a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800247e:	3330      	adds	r3, #48	@ 0x30
 8002480:	4618      	mov	r0, r3
 8002482:	f003 f8ad 	bl	80055e0 <RCCEx_PLL3_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 800248c:	e00a      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002494:	e006      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002496:	bf00      	nop
 8002498:	e004      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800249a:	bf00      	nop
 800249c:	e002      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800249e:	bf00      	nop
 80024a0:	e000      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80024a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10c      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80024ac:	4b2f      	ldr	r3, [pc, #188]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024b2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80024b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024bc:	4a2b      	ldr	r2, [pc, #172]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80024be:	430b      	orrs	r3, r1
 80024c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80024c4:	e003      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80024ca:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f002 0308 	and.w	r3, r2, #8
 80024da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4313      	orrs	r3, r2
 80024ec:	d056      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80024ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024f4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80024f8:	d031      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80024fa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80024fe:	d82a      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002504:	d02d      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800250a:	d824      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800250c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002510:	d029      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002512:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002516:	d81e      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251c:	d011      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002522:	d818      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d023      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800252c:	d113      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800252e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002532:	3308      	adds	r3, #8
 8002534:	4618      	mov	r0, r3
 8002536:	f002 ffbb 	bl	80054b0 <RCCEx_PLL2_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002540:	e017      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002546:	3330      	adds	r3, #48	@ 0x30
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f849 	bl	80055e0 <RCCEx_PLL3_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002554:	e00d      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800255c:	e009      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800255e:	bf00      	nop
 8002560:	e007      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002562:	bf00      	nop
 8002564:	e005      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002566:	bf00      	nop
 8002568:	e003      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800256a:	bf00      	nop
 800256c:	44020c00 	.word	0x44020c00
        break;
 8002570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002572:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800257a:	4bb9      	ldr	r3, [pc, #740]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800257c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002580:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800258a:	4ab5      	ldr	r2, [pc, #724]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800258c:	430b      	orrs	r3, r1
 800258e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002592:	e003      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002594:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002598:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800259c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f002 0310 	and.w	r3, r2, #16
 80025a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80025b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80025b6:	460b      	mov	r3, r1
 80025b8:	4313      	orrs	r3, r2
 80025ba:	d053      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80025bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80025c6:	d031      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80025c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80025cc:	d82a      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025d2:	d02d      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80025d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025d8:	d824      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025de:	d029      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80025e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025e4:	d81e      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ea:	d011      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80025ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f0:	d818      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d020      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80025f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025fa:	d113      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80025fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002600:	3308      	adds	r3, #8
 8002602:	4618      	mov	r0, r3
 8002604:	f002 ff54 	bl	80054b0 <RCCEx_PLL2_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 800260e:	e014      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002614:	3330      	adds	r3, #48	@ 0x30
 8002616:	4618      	mov	r0, r3
 8002618:	f002 ffe2 	bl	80055e0 <RCCEx_PLL3_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002622:	e00a      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800262a:	e006      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800262c:	bf00      	nop
 800262e:	e004      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002630:	bf00      	nop
 8002632:	e002      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002634:	bf00      	nop
 8002636:	e000      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800263a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002642:	4b87      	ldr	r3, [pc, #540]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002648:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800264c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002652:	4a83      	ldr	r2, [pc, #524]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002654:	430b      	orrs	r3, r1
 8002656:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800265a:	e003      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800265c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002660:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f002 0320 	and.w	r3, r2, #32
 8002670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800267a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800267e:	460b      	mov	r3, r1
 8002680:	4313      	orrs	r3, r2
 8002682:	d053      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800268e:	d031      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002690:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002694:	d82a      	bhi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800269a:	d02d      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800269c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026a0:	d824      	bhi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80026a2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80026a6:	d029      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80026a8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80026ac:	d81e      	bhi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b2:	d011      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80026b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b8:	d818      	bhi.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d020      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80026be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026c2:	d113      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80026c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026c8:	3308      	adds	r3, #8
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 fef0 	bl	80054b0 <RCCEx_PLL2_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80026d6:	e014      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80026d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026dc:	3330      	adds	r3, #48	@ 0x30
 80026de:	4618      	mov	r0, r3
 80026e0:	f002 ff7e 	bl	80055e0 <RCCEx_PLL3_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80026ea:	e00a      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80026f2:	e006      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80026f4:	bf00      	nop
 80026f6:	e004      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80026f8:	bf00      	nop
 80026fa:	e002      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80026fc:	bf00      	nop
 80026fe:	e000      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002702:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800270a:	4b55      	ldr	r3, [pc, #340]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800270c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002710:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271a:	4a51      	ldr	r2, [pc, #324]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800271c:	430b      	orrs	r3, r1
 800271e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002722:	e003      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002728:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800272c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002742:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002746:	460b      	mov	r3, r1
 8002748:	4313      	orrs	r3, r2
 800274a:	d053      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800274c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002752:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002756:	d031      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002758:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800275c:	d82a      	bhi.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800275e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002762:	d02d      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002764:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002768:	d824      	bhi.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800276a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800276e:	d029      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002770:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002774:	d81e      	bhi.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002776:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800277a:	d011      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800277c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002780:	d818      	bhi.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d020      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800278a:	d113      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800278c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002790:	3308      	adds	r3, #8
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fe8c 	bl	80054b0 <RCCEx_PLL2_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800279e:	e014      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80027a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027a4:	3330      	adds	r3, #48	@ 0x30
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 ff1a 	bl	80055e0 <RCCEx_PLL3_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80027b2:	e00a      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80027ba:	e006      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80027bc:	bf00      	nop
 80027be:	e004      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80027c0:	bf00      	nop
 80027c2:	e002      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80027c4:	bf00      	nop
 80027c6:	e000      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80027c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10c      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80027d2:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80027dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027e4:	430b      	orrs	r3, r1
 80027e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027ea:	e003      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80027f0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800280a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800280e:	460b      	mov	r3, r1
 8002810:	4313      	orrs	r3, r2
 8002812:	d03d      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800281a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800281e:	d01b      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002820:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002824:	d814      	bhi.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800282a:	d017      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x654>
 800282c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002830:	d80e      	bhi.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283a:	d109      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800283c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002840:	3330      	adds	r3, #48	@ 0x30
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fecc 	bl	80055e0 <RCCEx_PLL3_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800284e:	e00a      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002856:	e006      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002858:	bf00      	nop
 800285a:	e004      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 800285c:	bf00      	nop
 800285e:	e002      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8002860:	44020c00 	.word	0x44020c00
        break;
 8002864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002866:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800286e:	4b99      	ldr	r3, [pc, #612]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002870:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002874:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800287c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800287e:	4a95      	ldr	r2, [pc, #596]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002880:	430b      	orrs	r3, r1
 8002882:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002886:	e003      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800288c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800289c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80028aa:	460b      	mov	r3, r1
 80028ac:	4313      	orrs	r3, r2
 80028ae:	d03b      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80028b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028ba:	d01b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80028bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028c0:	d814      	bhi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80028c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028c6:	d017      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80028c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028cc:	d80e      	bhi.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d014      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80028d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028d6:	d109      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028dc:	3330      	adds	r3, #48	@ 0x30
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fe7e 	bl	80055e0 <RCCEx_PLL3_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80028ea:	e008      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80028f2:	e004      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80028f4:	bf00      	nop
 80028f6:	e002      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80028fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10c      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002906:	4b73      	ldr	r3, [pc, #460]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002908:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800290c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8002910:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002914:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002916:	4a6f      	ldr	r2, [pc, #444]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002918:	430b      	orrs	r3, r1
 800291a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800291e:	e003      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002924:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002934:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800293e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002942:	460b      	mov	r3, r1
 8002944:	4313      	orrs	r3, r2
 8002946:	d03d      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800294c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002950:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002954:	d01b      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x786>
 8002956:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800295a:	d814      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800295c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002960:	d017      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8002962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002966:	d80e      	bhi.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d014      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 800296c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002970:	d109      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002976:	3330      	adds	r3, #48	@ 0x30
 8002978:	4618      	mov	r0, r3
 800297a:	f002 fe31 	bl	80055e0 <RCCEx_PLL3_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002984:	e008      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800298c:	e004      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800298e:	bf00      	nop
 8002990:	e002      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002992:	bf00      	nop
 8002994:	e000      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8002996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002998:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10d      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80029a0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80029a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80029aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029b2:	4a48      	ldr	r2, [pc, #288]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029b4:	430b      	orrs	r3, r1
 80029b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80029ba:	e003      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80029c0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80029c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80029d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80029da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80029de:	460b      	mov	r3, r1
 80029e0:	4313      	orrs	r3, r2
 80029e2:	d035      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80029e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029f0:	d015      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x816>
 80029f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029f6:	d80e      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a00:	d109      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a06:	3330      	adds	r3, #48	@ 0x30
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fde9 	bl	80055e0 <RCCEx_PLL3_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002a14:	e006      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002a1c:	e002      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8002a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002a2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002a32:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8002a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3e:	4a25      	ldr	r2, [pc, #148]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a40:	430b      	orrs	r3, r1
 8002a42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002a46:	e003      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a4c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	2100      	movs	r1, #0
 8002a5a:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	d037      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8002a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a7c:	d015      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8002a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a82:	d80e      	bhi.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8002a88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a92:	3330      	adds	r3, #48	@ 0x30
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 fda3 	bl	80055e0 <RCCEx_PLL3_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8002aa0:	e006      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002aa8:	e002      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8002aae:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002ab0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002abe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aca:	4a02      	ldr	r2, [pc, #8]	@ (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002acc:	430b      	orrs	r3, r1
 8002ace:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8002ad4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002adc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	2100      	movs	r1, #0
 8002aea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002af2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002af6:	460b      	mov	r3, r1
 8002af8:	4313      	orrs	r3, r2
 8002afa:	d00e      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002afc:	4bb8      	ldr	r3, [pc, #736]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4ab7      	ldr	r2, [pc, #732]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002b02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b06:	61d3      	str	r3, [r2, #28]
 8002b08:	4bb5      	ldr	r3, [pc, #724]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002b0a:	69d9      	ldr	r1, [r3, #28]
 8002b0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b10:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002b14:	4ab2      	ldr	r2, [pc, #712]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002b16:	430b      	orrs	r3, r1
 8002b18:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8002b26:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b28:	2300      	movs	r3, #0
 8002b2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002b30:	460b      	mov	r3, r1
 8002b32:	4313      	orrs	r3, r2
 8002b34:	d055      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002b42:	d031      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8002b44:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002b48:	d82a      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4e:	d02d      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b54:	d824      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b5a:	d029      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8002b5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b60:	d81e      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b66:	d011      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b6c:	d818      	bhi.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8002b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b76:	d113      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fc96 	bl	80054b0 <RCCEx_PLL2_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b90:	3330      	adds	r3, #48	@ 0x30
 8002b92:	4618      	mov	r0, r3
 8002b94:	f002 fd24 	bl	80055e0 <RCCEx_PLL3_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002ba6:	e006      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002ba8:	bf00      	nop
 8002baa:	e004      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002bac:	bf00      	nop
 8002bae:	e002      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002bb0:	bf00      	nop
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8002bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002bbe:	4b88      	ldr	r3, [pc, #544]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002bc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002bc4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd0:	4a83      	ldr	r2, [pc, #524]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002bd8:	e003      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002bde:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002bee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bf4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	d055      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c06:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002c0a:	d031      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8002c0c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002c10:	d82a      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c16:	d02d      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8002c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c1c:	d824      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002c1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c22:	d029      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002c24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c28:	d81e      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2e:	d011      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c34:	d818      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d020      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3e:	d113      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c44:	3308      	adds	r3, #8
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fc32 	bl	80054b0 <RCCEx_PLL2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002c52:	e014      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c58:	3330      	adds	r3, #48	@ 0x30
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fcc0 	bl	80055e0 <RCCEx_PLL3_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002c66:	e00a      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002c6e:	e006      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8002c70:	bf00      	nop
 8002c72:	e004      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8002c74:	bf00      	nop
 8002c76:	e002      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8002c78:	bf00      	nop
 8002c7a:	e000      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8002c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002c86:	4b56      	ldr	r3, [pc, #344]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002c88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002c8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c98:	4a51      	ldr	r2, [pc, #324]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002ca0:	e003      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ca6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8002cb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cb8:	2300      	movs	r3, #0
 8002cba:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	d032      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d80f      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d211      	bcs.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d911      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fbe3 	bl	80054b0 <RCCEx_PLL2_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002cf0:	e006      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002cf8:	e002      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8002cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002d08:	4b35      	ldr	r3, [pc, #212]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d0e:	f023 0107 	bic.w	r1, r3, #7
 8002d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d1a:	4a31      	ldr	r2, [pc, #196]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d22:	e003      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d28:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8002d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	2100      	movs	r1, #0
 8002d36:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002d42:	460b      	mov	r3, r1
 8002d44:	4313      	orrs	r3, r2
 8002d46:	d024      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8002d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d005      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8002d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d74:	f023 0108 	bic.w	r1, r3, #8
 8002d78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d80:	4a17      	ldr	r2, [pc, #92]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002d82:	430b      	orrs	r3, r1
 8002d84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d88:	e003      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d8e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002da0:	2300      	movs	r3, #0
 8002da2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002da4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8002da8:	460b      	mov	r3, r1
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f000 80b9 	beq.w	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002db0:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	4a0b      	ldr	r2, [pc, #44]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dbc:	f7fd ff0a 	bl	8000bd4 <HAL_GetTick>
 8002dc0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002dc4:	e010      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7fd ff05 	bl	8000bd4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d908      	bls.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8002dde:	bf00      	nop
 8002de0:	44020c00 	.word	0x44020c00
 8002de4:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002de8:	4bba      	ldr	r3, [pc, #744]	@ (80030d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0e8      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8002df4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 808e 	bne.w	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dfe:	4bb6      	ldr	r3, [pc, #728]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d023      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8002e14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e18:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8002e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d01b      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e24:	4bac      	ldr	r3, [pc, #688]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e32:	4ba9      	ldr	r3, [pc, #676]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e38:	4aa7      	ldr	r2, [pc, #668]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e42:	4ba5      	ldr	r3, [pc, #660]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e48:	4aa3      	ldr	r2, [pc, #652]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e52:	4aa1      	ldr	r2, [pc, #644]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d019      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fd feb4 	bl	8000bd4 <HAL_GetTick>
 8002e6c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e70:	e00d      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fd feaf 	bl	8000bd4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e7c:	1ad2      	subs	r2, r2, r3
 8002e7e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d903      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8002e8c:	e006      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8e:	4b92      	ldr	r3, [pc, #584]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ea      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8002e9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d135      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002ea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ea8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eb4:	d110      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8002eb6:	4b88      	ldr	r3, [pc, #544]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ecc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ed0:	4a81      	ldr	r2, [pc, #516]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	61d3      	str	r3, [r2, #28]
 8002ed6:	e005      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8002ed8:	4b7f      	ldr	r3, [pc, #508]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	4a7e      	ldr	r2, [pc, #504]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002ede:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ee2:	61d3      	str	r3, [r2, #28]
 8002ee4:	4b7c      	ldr	r3, [pc, #496]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eea:	4a7b      	ldr	r2, [pc, #492]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ef4:	4b78      	ldr	r3, [pc, #480]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002ef6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8002efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002efe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	4a74      	ldr	r2, [pc, #464]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f0e:	e008      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f1e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f30:	2300      	movs	r3, #0
 8002f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	d035      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f46:	2b30      	cmp	r3, #48	@ 0x30
 8002f48:	d014      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8002f4a:	2b30      	cmp	r3, #48	@ 0x30
 8002f4c:	d80e      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d012      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d80a      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d010      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	4a5d      	ldr	r2, [pc, #372]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f68:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8002f6a:	e008      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002f72:	e004      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8002f74:	bf00      	nop
 8002f76:	e002      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8002f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002f86:	4b54      	ldr	r3, [pc, #336]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f8c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f98:	4a4f      	ldr	r2, [pc, #316]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fa0:	e003      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fa6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002fb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fbc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	d033      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8002fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8002fd2:	2b40      	cmp	r3, #64	@ 0x40
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002fd6:	e010      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fdc:	4a3e      	ldr	r2, [pc, #248]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8002fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8002fe4:	e00d      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fea:	3308      	adds	r3, #8
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 fa5f 	bl	80054b0 <RCCEx_PLL2_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8002ff8:	e003      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003002:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800300a:	4b33      	ldr	r3, [pc, #204]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800300c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003010:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003018:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800301c:	4a2e      	ldr	r2, [pc, #184]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800301e:	430b      	orrs	r3, r1
 8003020:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003024:	e003      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003026:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800302a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800302e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800303a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800303c:	2300      	movs	r3, #0
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003040:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003044:	460b      	mov	r3, r1
 8003046:	4313      	orrs	r3, r2
 8003048:	d04c      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800304a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800304e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003052:	2b04      	cmp	r3, #4
 8003054:	d827      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8003056:	a201      	add	r2, pc, #4	@ (adr r2, 800305c <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	08003071 	.word	0x08003071
 8003060:	0800307f 	.word	0x0800307f
 8003064:	08003093 	.word	0x08003093
 8003068:	080030af 	.word	0x080030af
 800306c:	080030af 	.word	0x080030af
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003070:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	4a18      	ldr	r2, [pc, #96]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800307c:	e018      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800307e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003082:	3308      	adds	r3, #8
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fa13 	bl	80054b0 <RCCEx_PLL2_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003090:	e00e      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003096:	3330      	adds	r3, #48	@ 0x30
 8003098:	4618      	mov	r0, r3
 800309a:	f002 faa1 	bl	80055e0 <RCCEx_PLL3_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80030a4:	e004      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030ac:	e000      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80030ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80030b8:	4b07      	ldr	r3, [pc, #28]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030be:	f023 0107 	bic.w	r1, r3, #7
 80030c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80030ca:	4a03      	ldr	r2, [pc, #12]	@ (80030d8 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80030cc:	430b      	orrs	r3, r1
 80030ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030d2:	e007      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80030d4:	44020800 	.word	0x44020800
 80030d8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80030e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80030fa:	460b      	mov	r3, r1
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f000 8081 	beq.w	8003204 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800310a:	2b20      	cmp	r3, #32
 800310c:	d85f      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800310e:	a201      	add	r2, pc, #4	@ (adr r2, 8003114 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003199 	.word	0x08003199
 8003118:	080031cf 	.word	0x080031cf
 800311c:	080031cf 	.word	0x080031cf
 8003120:	080031cf 	.word	0x080031cf
 8003124:	080031cf 	.word	0x080031cf
 8003128:	080031cf 	.word	0x080031cf
 800312c:	080031cf 	.word	0x080031cf
 8003130:	080031cf 	.word	0x080031cf
 8003134:	080031a7 	.word	0x080031a7
 8003138:	080031cf 	.word	0x080031cf
 800313c:	080031cf 	.word	0x080031cf
 8003140:	080031cf 	.word	0x080031cf
 8003144:	080031cf 	.word	0x080031cf
 8003148:	080031cf 	.word	0x080031cf
 800314c:	080031cf 	.word	0x080031cf
 8003150:	080031cf 	.word	0x080031cf
 8003154:	080031bb 	.word	0x080031bb
 8003158:	080031cf 	.word	0x080031cf
 800315c:	080031cf 	.word	0x080031cf
 8003160:	080031cf 	.word	0x080031cf
 8003164:	080031cf 	.word	0x080031cf
 8003168:	080031cf 	.word	0x080031cf
 800316c:	080031cf 	.word	0x080031cf
 8003170:	080031cf 	.word	0x080031cf
 8003174:	080031d7 	.word	0x080031d7
 8003178:	080031cf 	.word	0x080031cf
 800317c:	080031cf 	.word	0x080031cf
 8003180:	080031cf 	.word	0x080031cf
 8003184:	080031cf 	.word	0x080031cf
 8003188:	080031cf 	.word	0x080031cf
 800318c:	080031cf 	.word	0x080031cf
 8003190:	080031cf 	.word	0x080031cf
 8003194:	080031d7 	.word	0x080031d7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003198:	4bb9      	ldr	r3, [pc, #740]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	4ab8      	ldr	r2, [pc, #736]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80031a4:	e018      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031aa:	3308      	adds	r3, #8
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 f97f 	bl	80054b0 <RCCEx_PLL2_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80031b8:	e00e      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031be:	3330      	adds	r3, #48	@ 0x30
 80031c0:	4618      	mov	r0, r3
 80031c2:	f002 fa0d 	bl	80055e0 <RCCEx_PLL3_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80031cc:	e004      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80031d4:	e000      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80031d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10d      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80031e0:	4ba7      	ldr	r3, [pc, #668]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80031e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80031ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031f2:	4aa3      	ldr	r2, [pc, #652]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80031f4:	430b      	orrs	r3, r1
 80031f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031fa:	e003      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003200:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003216:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800321a:	460b      	mov	r3, r1
 800321c:	4313      	orrs	r3, r2
 800321e:	d04e      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003224:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800322c:	d02e      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800322e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003232:	d827      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003234:	2bc0      	cmp	r3, #192	@ 0xc0
 8003236:	d02b      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003238:	2bc0      	cmp	r3, #192	@ 0xc0
 800323a:	d823      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800323c:	2b80      	cmp	r3, #128	@ 0x80
 800323e:	d017      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8003240:	2b80      	cmp	r3, #128	@ 0x80
 8003242:	d81f      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8003248:	2b40      	cmp	r3, #64	@ 0x40
 800324a:	d007      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1054>
 800324c:	e01a      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800324e:	4b8c      	ldr	r3, [pc, #560]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	4a8b      	ldr	r2, [pc, #556]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003258:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800325a:	e01a      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800325c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003260:	3308      	adds	r3, #8
 8003262:	4618      	mov	r0, r3
 8003264:	f002 f924 	bl	80054b0 <RCCEx_PLL2_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800326e:	e010      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003274:	3330      	adds	r3, #48	@ 0x30
 8003276:	4618      	mov	r0, r3
 8003278:	f002 f9b2 	bl	80055e0 <RCCEx_PLL3_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003282:	e006      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800328a:	e002      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800328c:	bf00      	nop
 800328e:	e000      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8003290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003292:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800329a:	4b79      	ldr	r3, [pc, #484]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800329c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a0:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80032a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032ac:	4974      	ldr	r1, [pc, #464]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80032b4:	e003      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80032ba:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80032be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80032d4:	460b      	mov	r3, r1
 80032d6:	4313      	orrs	r3, r2
 80032d8:	d055      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80032da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80032e2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80032e6:	d031      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1144>
 80032e8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80032ec:	d82a      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80032ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032f2:	d02d      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032f8:	d824      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80032fa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032fe:	d029      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8003300:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003304:	d81e      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330a:	d011      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003310:	d818      	bhi.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d020      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8003316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800331a:	d113      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800331c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003320:	3308      	adds	r3, #8
 8003322:	4618      	mov	r0, r3
 8003324:	f002 f8c4 	bl	80054b0 <RCCEx_PLL2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800332e:	e014      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003334:	3330      	adds	r3, #48	@ 0x30
 8003336:	4618      	mov	r0, r3
 8003338:	f002 f952 	bl	80055e0 <RCCEx_PLL3_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003342:	e00a      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800334a:	e006      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 800334c:	bf00      	nop
 800334e:	e004      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003350:	bf00      	nop
 8003352:	e002      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003362:	4b47      	ldr	r3, [pc, #284]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003368:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 800336c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003370:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003374:	4942      	ldr	r1, [pc, #264]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800337c:	e003      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003382:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	2100      	movs	r1, #0
 8003390:	61b9      	str	r1, [r7, #24]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800339c:	460b      	mov	r3, r1
 800339e:	4313      	orrs	r3, r2
 80033a0:	d03c      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80033a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d81b      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 80033ae:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033ef 	.word	0x080033ef
 80033b8:	080033c5 	.word	0x080033c5
 80033bc:	080033d3 	.word	0x080033d3
 80033c0:	080033ef 	.word	0x080033ef
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80033ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ce:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80033d0:	e00e      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033d6:	3308      	adds	r3, #8
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 f869 	bl	80054b0 <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80033e4:	e004      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 80033ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10d      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80033f8:	4b21      	ldr	r3, [pc, #132]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80033fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033fe:	f023 0203 	bic.w	r2, r3, #3
 8003402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003406:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800340a:	491d      	ldr	r1, [pc, #116]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003418:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800341c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	2100      	movs	r1, #0
 8003426:	6139      	str	r1, [r7, #16]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003432:	460b      	mov	r3, r1
 8003434:	4313      	orrs	r3, r2
 8003436:	d03c      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800343c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003444:	d00e      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800344a:	d815      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d019      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8003450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003454:	d110      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003456:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	4a09      	ldr	r2, [pc, #36]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800345c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003460:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003462:	e010      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003468:	3308      	adds	r3, #8
 800346a:	4618      	mov	r0, r3
 800346c:	f002 f820 	bl	80054b0 <RCCEx_PLL2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003476:	e006      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800347e:	e002      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8003480:	44020c00 	.word	0x44020c00
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800348e:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a0:	4938      	ldr	r1, [pc, #224]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034ae:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	2100      	movs	r1, #0
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80034c8:	460b      	mov	r3, r1
 80034ca:	4313      	orrs	r3, r2
 80034cc:	d038      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80034ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80034d6:	2b30      	cmp	r3, #48	@ 0x30
 80034d8:	d01b      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80034da:	2b30      	cmp	r3, #48	@ 0x30
 80034dc:	d815      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d002      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d007      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80034e6:	e010      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e8:	4b26      	ldr	r3, [pc, #152]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	4a25      	ldr	r2, [pc, #148]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80034ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80034f4:	e00e      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034fa:	3330      	adds	r3, #48	@ 0x30
 80034fc:	4618      	mov	r0, r3
 80034fe:	f002 f86f 	bl	80055e0 <RCCEx_PLL3_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003508:	e004      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003510:	e000      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8003512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003514:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10d      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800351c:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800351e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003522:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800352a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800352e:	4915      	ldr	r1, [pc, #84]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003536:	e003      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800353c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003540:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	2100      	movs	r1, #0
 800354a:	6039      	str	r1, [r7, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003556:	460b      	mov	r3, r1
 8003558:	4313      	orrs	r3, r2
 800355a:	d00c      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800355c:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 800355e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800356a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800356e:	4905      	ldr	r1, [pc, #20]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8003576:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800357a:	4618      	mov	r0, r3
 800357c:	37e8      	adds	r7, #232	@ 0xe8
 800357e:	46bd      	mov	sp, r7
 8003580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003584:	44020c00 	.word	0x44020c00

08003588 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003588:	b480      	push	{r7}
 800358a:	b08b      	sub	sp, #44	@ 0x2c
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003590:	4bae      	ldr	r3, [pc, #696]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003598:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800359a:	4bac      	ldr	r3, [pc, #688]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80035a4:	4ba9      	ldr	r3, [pc, #676]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ae:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80035b0:	4ba6      	ldr	r3, [pc, #664]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80035bc:	4ba3      	ldr	r3, [pc, #652]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	08db      	lsrs	r3, r3, #3
 80035c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8126 	beq.w	800382c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d053      	beq.n	800368e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d86f      	bhi.n	80036cc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d003      	beq.n	80035fa <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d02b      	beq.n	8003650 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80035f8:	e068      	b.n	80036cc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80035fa:	4b94      	ldr	r3, [pc, #592]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	4a92      	ldr	r2, [pc, #584]	@ (8003850 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003606:	fa22 f303 	lsr.w	r3, r2, r3
 800360a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003632:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003854 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800364e:	e068      	b.n	8003722 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003858 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003670:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003854 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003688:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800368c:	e049      	b.n	8003722 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003698:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800385c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800369c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80036ae:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003854 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80036ca:	e02a      	b.n	8003722 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80036cc:	4b5f      	ldr	r3, [pc, #380]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	08db      	lsrs	r3, r3, #3
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003850 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
 80036dc:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	ee07 3a90 	vmov	s15, r3
 80036e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003700:	ed97 6a04 	vldr	s12, [r7, #16]
 8003704:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003854 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003710:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003720:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003722:	4b4a      	ldr	r3, [pc, #296]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800372e:	d121      	bne.n	8003774 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003730:	4b46      	ldr	r3, [pc, #280]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d017      	beq.n	800376c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800373c:	4b43      	ldr	r3, [pc, #268]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800373e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003740:	0a5b      	lsrs	r3, r3, #9
 8003742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800374e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003752:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003756:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800375a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003762:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e006      	b.n	800377a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e002      	b.n	800377a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800377a:	4b34      	ldr	r3, [pc, #208]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003786:	d121      	bne.n	80037cc <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003788:	4b30      	ldr	r3, [pc, #192]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d017      	beq.n	80037c4 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003794:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80037a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037aa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80037ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80037b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ba:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	e006      	b.n	80037d2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	e002      	b.n	80037d2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037de:	d121      	bne.n	8003824 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80037e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d017      	beq.n	800381c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80037ec:	4b17      	ldr	r3, [pc, #92]	@ (800384c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80037ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f0:	0e1b      	lsrs	r3, r3, #24
 80037f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80037fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003802:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003806:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800380a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800380e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003812:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800381a:	e010      	b.n	800383e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
}
 8003822:	e00c      	b.n	800383e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
}
 800382a:	e008      	b.n	800383e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
}
 800383e:	bf00      	nop
 8003840:	372c      	adds	r7, #44	@ 0x2c
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	44020c00 	.word	0x44020c00
 8003850:	03d09000 	.word	0x03d09000
 8003854:	46000000 	.word	0x46000000
 8003858:	4a742400 	.word	0x4a742400
 800385c:	4bbebc20 	.word	0x4bbebc20

08003860 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003860:	b480      	push	{r7}
 8003862:	b08b      	sub	sp, #44	@ 0x2c
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003868:	4bae      	ldr	r3, [pc, #696]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003870:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003872:	4bac      	ldr	r3, [pc, #688]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800387c:	4ba9      	ldr	r3, [pc, #676]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003886:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003888:	4ba6      	ldr	r3, [pc, #664]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003894:	4ba3      	ldr	r3, [pc, #652]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	08db      	lsrs	r3, r3, #3
 800389a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	fb02 f303 	mul.w	r3, r2, r3
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ac:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8126 	beq.w	8003b04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d053      	beq.n	8003966 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d86f      	bhi.n	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d003      	beq.n	80038d2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d02b      	beq.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80038d0:	e068      	b.n	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038d2:	4b94      	ldr	r3, [pc, #592]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	08db      	lsrs	r3, r3, #3
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	4a92      	ldr	r2, [pc, #584]	@ (8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80038de:	fa22 f303 	lsr.w	r3, r2, r3
 80038e2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003906:	ed97 6a04 	vldr	s12, [r7, #16]
 800390a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800391a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003926:	e068      	b.n	80039fa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003932:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003b30 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8003936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003944:	ed97 6a04 	vldr	s12, [r7, #16]
 8003948:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800394c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003954:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003960:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003964:	e049      	b.n	80039fa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003970:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8003974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003982:	ed97 6a04 	vldr	s12, [r7, #16]
 8003986:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80039a2:	e02a      	b.n	80039fa <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80039a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	08db      	lsrs	r3, r3, #3
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	ee07 3a90 	vmov	s15, r3
 80039bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d8:	ed97 6a04 	vldr	s12, [r7, #16]
 80039dc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003b2c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80039e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80039f8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80039fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a06:	d121      	bne.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003a08:	4b46      	ldr	r3, [pc, #280]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d017      	beq.n	8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003a14:	4b43      	ldr	r3, [pc, #268]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	0a5b      	lsrs	r3, r3, #9
 8003a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8003a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003a2e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a3a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e006      	b.n	8003a52 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e002      	b.n	8003a52 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003a52:	4b34      	ldr	r3, [pc, #208]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a5e:	d121      	bne.n	8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003a60:	4b30      	ldr	r3, [pc, #192]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d017      	beq.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003a7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a82:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003a86:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a92:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	e006      	b.n	8003aaa <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	e002      	b.n	8003aaa <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ab6:	d121      	bne.n	8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d017      	beq.n	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003ac4:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac8:	0e1b      	lsrs	r3, r3, #24
 8003aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8003ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ada:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8003ade:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aea:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003af2:	e010      	b.n	8003b16 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
}
 8003afa:	e00c      	b.n	8003b16 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
}
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
}
 8003b16:	bf00      	nop
 8003b18:	372c      	adds	r7, #44	@ 0x2c
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	44020c00 	.word	0x44020c00
 8003b28:	03d09000 	.word	0x03d09000
 8003b2c:	46000000 	.word	0x46000000
 8003b30:	4a742400 	.word	0x4a742400
 8003b34:	4bbebc20 	.word	0x4bbebc20

08003b38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b08b      	sub	sp, #44	@ 0x2c
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003b40:	4bae      	ldr	r3, [pc, #696]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b48:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003b4a:	4bac      	ldr	r3, [pc, #688]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8003b54:	4ba9      	ldr	r3, [pc, #676]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b5e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8003b60:	4ba6      	ldr	r3, [pc, #664]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003b6c:	4ba3      	ldr	r3, [pc, #652]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b84:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8126 	beq.w	8003ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d053      	beq.n	8003c3e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d86f      	bhi.n	8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d003      	beq.n	8003baa <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d02b      	beq.n	8003c00 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8003ba8:	e068      	b.n	8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003baa:	4b94      	ldr	r3, [pc, #592]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	08db      	lsrs	r3, r3, #3
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	4a92      	ldr	r2, [pc, #584]	@ (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	ee07 3a90 	vmov	s15, r3
 8003bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bde:	ed97 6a04 	vldr	s12, [r7, #16]
 8003be2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003bfe:	e068      	b.n	8003cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c20:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003c24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003c3c:	e049      	b.n	8003cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c48:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8003c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003c5e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003c7a:	e02a      	b.n	8003cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c7c:	4b5f      	ldr	r3, [pc, #380]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	4a5e      	ldr	r2, [pc, #376]	@ (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb0:	ed97 6a04 	vldr	s12, [r7, #16]
 8003cb4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8003cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ccc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003cd0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cde:	d121      	bne.n	8003d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003ce0:	4b46      	ldr	r3, [pc, #280]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d017      	beq.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003cec:	4b43      	ldr	r3, [pc, #268]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf0:	0a5b      	lsrs	r3, r3, #9
 8003cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8003cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d02:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8003d06:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d12:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e006      	b.n	8003d2a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e002      	b.n	8003d2a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003d2a:	4b34      	ldr	r3, [pc, #208]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d36:	d121      	bne.n	8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003d38:	4b30      	ldr	r3, [pc, #192]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d44:	4b2d      	ldr	r3, [pc, #180]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003d56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8003d5e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	e006      	b.n	8003d82 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	e002      	b.n	8003d82 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003d82:	4b1e      	ldr	r3, [pc, #120]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d8e:	d121      	bne.n	8003dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d017      	beq.n	8003dcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d9c:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da0:	0e1b      	lsrs	r3, r3, #24
 8003da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8003dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003db2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8003db6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003dca:	e010      	b.n	8003dee <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
}
 8003dd2:	e00c      	b.n	8003dee <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
}
 8003dda:	e008      	b.n	8003dee <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
}
 8003dee:	bf00      	nop
 8003df0:	372c      	adds	r7, #44	@ 0x2c
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	44020c00 	.word	0x44020c00
 8003e00:	03d09000 	.word	0x03d09000
 8003e04:	46000000 	.word	0x46000000
 8003e08:	4a742400 	.word	0x4a742400
 8003e0c:	4bbebc20 	.word	0x4bbebc20

08003e10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b08f      	sub	sp, #60	@ 0x3c
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003e1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e1e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8003e22:	4321      	orrs	r1, r4
 8003e24:	d150      	bne.n	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003e26:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e30:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003e32:	4b23      	ldr	r3, [pc, #140]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d108      	bne.n	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e46:	d104      	bne.n	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e4e:	f001 bb20 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003e52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e60:	d108      	bne.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e68:	d104      	bne.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8003e6a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e70:	f001 bb0f 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8003e74:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e80:	d119      	bne.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8003e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e88:	d115      	bne.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e96:	d30a      	bcc.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8003e98:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ea2:	4a08      	ldr	r2, [pc, #32]	@ (8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003eaa:	f001 baf2 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8003eb2:	f001 baee 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eba:	f001 baea 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8003ebe:	bf00      	nop
 8003ec0:	44020c00 	.word	0x44020c00
 8003ec4:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ecc:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8003ed0:	ea50 0104 	orrs.w	r1, r0, r4
 8003ed4:	f000 8615 	beq.w	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8003ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003edc:	2801      	cmp	r0, #1
 8003ede:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8003ee2:	f081 82d3 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eea:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8003eee:	ea50 0104 	orrs.w	r1, r0, r4
 8003ef2:	f000 84d8 	beq.w	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8003ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003efa:	2801      	cmp	r0, #1
 8003efc:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8003f00:	f081 82c4 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003f04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f08:	f1a1 0410 	sub.w	r4, r1, #16
 8003f0c:	ea50 0104 	orrs.w	r1, r0, r4
 8003f10:	f001 8288 	beq.w	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8003f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f18:	2801      	cmp	r0, #1
 8003f1a:	f171 0110 	sbcs.w	r1, r1, #16
 8003f1e:	f081 82b5 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f26:	f1a1 0408 	sub.w	r4, r1, #8
 8003f2a:	ea50 0104 	orrs.w	r1, r0, r4
 8003f2e:	f001 81fe 	beq.w	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8003f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f36:	2801      	cmp	r0, #1
 8003f38:	f171 0108 	sbcs.w	r1, r1, #8
 8003f3c:	f081 82a6 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f44:	1f0c      	subs	r4, r1, #4
 8003f46:	ea50 0104 	orrs.w	r1, r0, r4
 8003f4a:	f000 8753 	beq.w	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 8003f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f52:	2801      	cmp	r0, #1
 8003f54:	f171 0104 	sbcs.w	r1, r1, #4
 8003f58:	f081 8298 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f60:	1e8c      	subs	r4, r1, #2
 8003f62:	ea50 0104 	orrs.w	r1, r0, r4
 8003f66:	f001 8173 	beq.w	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 8003f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f6e:	2801      	cmp	r0, #1
 8003f70:	f171 0102 	sbcs.w	r1, r1, #2
 8003f74:	f081 828a 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f7c:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8003f80:	4321      	orrs	r1, r4
 8003f82:	f001 80fe 	beq.w	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8003f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f8a:	4ccb      	ldr	r4, [pc, #812]	@ (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003f8c:	42a0      	cmp	r0, r4
 8003f8e:	f171 0100 	sbcs.w	r1, r1, #0
 8003f92:	f081 827b 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f9a:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8003f9e:	4321      	orrs	r1, r4
 8003fa0:	f001 8076 	beq.w	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8003fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fa8:	4cc4      	ldr	r4, [pc, #784]	@ (80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8003faa:	42a0      	cmp	r0, r4
 8003fac:	f171 0100 	sbcs.w	r1, r1, #0
 8003fb0:	f081 826c 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fb8:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8003fbc:	4321      	orrs	r1, r4
 8003fbe:	f000 87b5 	beq.w	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8003fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fc6:	4cbe      	ldr	r4, [pc, #760]	@ (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8003fc8:	42a0      	cmp	r0, r4
 8003fca:	f171 0100 	sbcs.w	r1, r1, #0
 8003fce:	f081 825d 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fd6:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8003fda:	4321      	orrs	r1, r4
 8003fdc:	f000 8738 	beq.w	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8003fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fe4:	4cb7      	ldr	r4, [pc, #732]	@ (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8003fe6:	42a0      	cmp	r0, r4
 8003fe8:	f171 0100 	sbcs.w	r1, r1, #0
 8003fec:	f081 824e 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8003ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ff4:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8003ff8:	4321      	orrs	r1, r4
 8003ffa:	f001 81cd 	beq.w	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8003ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004002:	4cb1      	ldr	r4, [pc, #708]	@ (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8004004:	42a0      	cmp	r0, r4
 8004006:	f171 0100 	sbcs.w	r1, r1, #0
 800400a:	f081 823f 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800400e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004012:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8004016:	4321      	orrs	r1, r4
 8004018:	f000 80d9 	beq.w	80041ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800401c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004020:	4caa      	ldr	r4, [pc, #680]	@ (80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8004022:	42a0      	cmp	r0, r4
 8004024:	f171 0100 	sbcs.w	r1, r1, #0
 8004028:	f081 8230 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800402c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004030:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8004034:	4321      	orrs	r1, r4
 8004036:	f000 83da 	beq.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800403a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800403e:	4ca4      	ldr	r4, [pc, #656]	@ (80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 8004040:	42a0      	cmp	r0, r4
 8004042:	f171 0100 	sbcs.w	r1, r1, #0
 8004046:	f081 8221 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800404a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800404e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8004052:	4321      	orrs	r1, r4
 8004054:	f000 8627 	beq.w	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8004058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800405c:	4c9d      	ldr	r4, [pc, #628]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 800405e:	42a0      	cmp	r0, r4
 8004060:	f171 0100 	sbcs.w	r1, r1, #0
 8004064:	f081 8212 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800406c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8004070:	4321      	orrs	r1, r4
 8004072:	f000 857a 	beq.w	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8004076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800407a:	4c97      	ldr	r4, [pc, #604]	@ (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 800407c:	42a0      	cmp	r0, r4
 800407e:	f171 0100 	sbcs.w	r1, r1, #0
 8004082:	f081 8203 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800408a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800408e:	4321      	orrs	r1, r4
 8004090:	f000 84fb 	beq.w	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004098:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800409c:	f171 0100 	sbcs.w	r1, r1, #0
 80040a0:	f081 81f4 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80040a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040a8:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80040ac:	4321      	orrs	r1, r4
 80040ae:	f000 84a9 	beq.w	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80040b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040b6:	f248 0401 	movw	r4, #32769	@ 0x8001
 80040ba:	42a0      	cmp	r0, r4
 80040bc:	f171 0100 	sbcs.w	r1, r1, #0
 80040c0:	f081 81e4 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80040c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040c8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80040cc:	4321      	orrs	r1, r4
 80040ce:	f000 8456 	beq.w	800497e <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 80040d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040d6:	f244 0401 	movw	r4, #16385	@ 0x4001
 80040da:	42a0      	cmp	r0, r4
 80040dc:	f171 0100 	sbcs.w	r1, r1, #0
 80040e0:	f081 81d4 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80040e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040e8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80040ec:	4321      	orrs	r1, r4
 80040ee:	f000 8403 	beq.w	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80040f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040f6:	f242 0401 	movw	r4, #8193	@ 0x2001
 80040fa:	42a0      	cmp	r0, r4
 80040fc:	f171 0100 	sbcs.w	r1, r1, #0
 8004100:	f081 81c4 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004104:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004108:	2821      	cmp	r0, #33	@ 0x21
 800410a:	f171 0100 	sbcs.w	r1, r1, #0
 800410e:	d255      	bcs.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004110:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004114:	4301      	orrs	r1, r0
 8004116:	f001 81b9 	beq.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800411a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800411e:	1e42      	subs	r2, r0, #1
 8004120:	f141 33ff 	adc.w	r3, r1, #4294967295
 8004124:	2a20      	cmp	r2, #32
 8004126:	f173 0100 	sbcs.w	r1, r3, #0
 800412a:	f081 81af 	bcs.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800412e:	2a1f      	cmp	r2, #31
 8004130:	f201 81ac 	bhi.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004134:	a101      	add	r1, pc, #4	@ (adr r1, 800413c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004136:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004213 	.word	0x08004213
 8004140:	08004311 	.word	0x08004311
 8004144:	0800548d 	.word	0x0800548d
 8004148:	080043d1 	.word	0x080043d1
 800414c:	0800548d 	.word	0x0800548d
 8004150:	0800548d 	.word	0x0800548d
 8004154:	0800548d 	.word	0x0800548d
 8004158:	080044a1 	.word	0x080044a1
 800415c:	0800548d 	.word	0x0800548d
 8004160:	0800548d 	.word	0x0800548d
 8004164:	0800548d 	.word	0x0800548d
 8004168:	0800548d 	.word	0x0800548d
 800416c:	0800548d 	.word	0x0800548d
 8004170:	0800548d 	.word	0x0800548d
 8004174:	0800548d 	.word	0x0800548d
 8004178:	08004585 	.word	0x08004585
 800417c:	0800548d 	.word	0x0800548d
 8004180:	0800548d 	.word	0x0800548d
 8004184:	0800548d 	.word	0x0800548d
 8004188:	0800548d 	.word	0x0800548d
 800418c:	0800548d 	.word	0x0800548d
 8004190:	0800548d 	.word	0x0800548d
 8004194:	0800548d 	.word	0x0800548d
 8004198:	0800548d 	.word	0x0800548d
 800419c:	0800548d 	.word	0x0800548d
 80041a0:	0800548d 	.word	0x0800548d
 80041a4:	0800548d 	.word	0x0800548d
 80041a8:	0800548d 	.word	0x0800548d
 80041ac:	0800548d 	.word	0x0800548d
 80041b0:	0800548d 	.word	0x0800548d
 80041b4:	0800548d 	.word	0x0800548d
 80041b8:	0800465b 	.word	0x0800465b
 80041bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80041c4:	430b      	orrs	r3, r1
 80041c6:	f000 82b3 	beq.w	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 80041ca:	f001 b95f 	b.w	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80041ce:	4b43      	ldr	r3, [pc, #268]	@ (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80041d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80041da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041e0:	f107 0320 	add.w	r3, r7, #32
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff f9cf 	bl	8003588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80041ee:	f001 b950 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	2b40      	cmp	r3, #64	@ 0x40
 80041f6:	d108      	bne.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fb2f 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004206:	f001 b944 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800420e:	f001 b940 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004212:	4b32      	ldr	r3, [pc, #200]	@ (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004224:	f7fd ffc4 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8004228:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800422a:	f001 b932 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800422e:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800423a:	d10a      	bne.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800423c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423e:	2b01      	cmp	r3, #1
 8004240:	d107      	bne.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fb0a 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004250:	e05c      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8004252:	4b22      	ldr	r3, [pc, #136]	@ (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800425a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800425e:	d10a      	bne.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	2b02      	cmp	r3, #2
 8004264:	d107      	bne.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fc64 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
 8004274:	e04a      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004276:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d10c      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	2b03      	cmp	r3, #3
 8004286:	d109      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
 800429a:	e037      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800429c:	4b0f      	ldr	r3, [pc, #60]	@ (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a8:	d11e      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11b      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b4:	e02a      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 80042b6:	bf00      	nop
 80042b8:	40000001 	.word	0x40000001
 80042bc:	20000001 	.word	0x20000001
 80042c0:	10000001 	.word	0x10000001
 80042c4:	08000001 	.word	0x08000001
 80042c8:	04000001 	.word	0x04000001
 80042cc:	00400001 	.word	0x00400001
 80042d0:	00200001 	.word	0x00200001
 80042d4:	00040001 	.word	0x00040001
 80042d8:	00020001 	.word	0x00020001
 80042dc:	44020c00 	.word	0x44020c00
 80042e0:	03d09000 	.word	0x03d09000
 80042e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80042e8:	4ba3      	ldr	r3, [pc, #652]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80042ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d106      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d103      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 80042fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004300:	637b      	str	r3, [r7, #52]	@ 0x34
 8004302:	e003      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004308:	f001 b8c3 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800430c:	f001 b8c1 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004310:	4b99      	ldr	r3, [pc, #612]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800431a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004322:	f7fd ff2f 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8004326:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004328:	f001 b8b3 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800432c:	4b92      	ldr	r3, [pc, #584]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004334:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004338:	d10a      	bne.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	2b08      	cmp	r3, #8
 800433e:	d107      	bne.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fa8b 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
 800434e:	e03d      	b.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	2b10      	cmp	r3, #16
 8004354:	d108      	bne.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fbec 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004364:	f001 b895 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004368:	4b83      	ldr	r3, [pc, #524]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b02      	cmp	r3, #2
 8004372:	d10c      	bne.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	2b18      	cmp	r3, #24
 8004378:	d109      	bne.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800437a:	4b7f      	ldr	r3, [pc, #508]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	4a7d      	ldr	r2, [pc, #500]	@ (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004386:	fa22 f303 	lsr.w	r3, r2, r3
 800438a:	637b      	str	r3, [r7, #52]	@ 0x34
 800438c:	e01e      	b.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800438e:	4b7a      	ldr	r3, [pc, #488]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800439c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d102      	bne.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 80043a2:	4b77      	ldr	r3, [pc, #476]	@ (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a6:	e011      	b.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80043a8:	4b73      	ldr	r3, [pc, #460]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80043aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d106      	bne.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b8:	2b28      	cmp	r3, #40	@ 0x28
 80043ba:	d103      	bne.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 80043bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c2:	e003      	b.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043c8:	f001 b863 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80043cc:	f001 b861 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80043d0:	4b69      	ldr	r3, [pc, #420]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80043d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043d6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80043da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80043e2:	f7fd fecf 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 80043e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80043e8:	f001 b853 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80043ec:	4b62      	ldr	r3, [pc, #392]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043f8:	d10a      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	2b40      	cmp	r3, #64	@ 0x40
 80043fe:	d107      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fa2b 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	637b      	str	r3, [r7, #52]	@ 0x34
 800440e:	e045      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8004410:	4b59      	ldr	r3, [pc, #356]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800441c:	d10a      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004420:	2b80      	cmp	r3, #128	@ 0x80
 8004422:	d107      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fb85 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
 8004432:	e033      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004434:	4b50      	ldr	r3, [pc, #320]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d10c      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	2bc0      	cmp	r3, #192	@ 0xc0
 8004444:	d109      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004446:	4b4c      	ldr	r3, [pc, #304]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	08db      	lsrs	r3, r3, #3
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	4a4a      	ldr	r2, [pc, #296]	@ (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
 8004458:	e020      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800445a:	4b47      	ldr	r3, [pc, #284]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004466:	d106      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8004468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446e:	d102      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8004470:	4b43      	ldr	r3, [pc, #268]	@ (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004472:	637b      	str	r3, [r7, #52]	@ 0x34
 8004474:	e012      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004476:	4b40      	ldr	r3, [pc, #256]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d107      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800448a:	d103      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 800448c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004490:	637b      	str	r3, [r7, #52]	@ 0x34
 8004492:	e003      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004498:	f000 bffb 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800449c:	f000 bff9 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80044a0:	4b35      	ldr	r3, [pc, #212]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80044a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044a6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80044aa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80044b2:	f7fd fe67 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 80044b6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80044b8:	f000 bfeb 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80044bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044c8:	d10b      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d0:	d107      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044d2:	f107 0314 	add.w	r3, r7, #20
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff f9c2 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e0:	e047      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80044e2:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ee:	d10b      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f6:	d107      	bne.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044f8:	f107 0308 	add.w	r3, r7, #8
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fb1b 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
 8004506:	e034      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004508:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d10d      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800451a:	d109      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800451c:	4b16      	ldr	r3, [pc, #88]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	4a15      	ldr	r2, [pc, #84]	@ (800457c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	637b      	str	r3, [r7, #52]	@ 0x34
 800452e:	e020      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8004530:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800453c:	d106      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004544:	d102      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8004546:	4b0e      	ldr	r3, [pc, #56]	@ (8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004548:	637b      	str	r3, [r7, #52]	@ 0x34
 800454a:	e012      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800454c:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800454e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b02      	cmp	r3, #2
 8004558:	d107      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800455a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004560:	d103      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8004562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800456e:	f000 bf90 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004572:	f000 bf8e 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004576:	bf00      	nop
 8004578:	44020c00 	.word	0x44020c00
 800457c:	03d09000 	.word	0x03d09000
 8004580:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004584:	4ba5      	ldr	r3, [pc, #660]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004586:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800458a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800458e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004596:	f7fd fdf5 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 800459a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800459c:	f000 bf79 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80045a0:	4b9e      	ldr	r3, [pc, #632]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045ac:	d10b      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b4:	d107      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045b6:	f107 0314 	add.w	r3, r7, #20
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff f950 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c4:	e047      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80045c6:	4b95      	ldr	r3, [pc, #596]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045d2:	d10b      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045da:	d107      	bne.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff faa9 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ea:	e034      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80045ec:	4b8b      	ldr	r3, [pc, #556]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d10d      	bne.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045fe:	d109      	bne.n	8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004600:	4b86      	ldr	r3, [pc, #536]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	08db      	lsrs	r3, r3, #3
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	4a85      	ldr	r2, [pc, #532]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
 8004612:	e020      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8004614:	4b81      	ldr	r3, [pc, #516]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800461c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004620:	d106      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004628:	d102      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 800462a:	4b7e      	ldr	r3, [pc, #504]	@ (8004824 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 800462c:	637b      	str	r3, [r7, #52]	@ 0x34
 800462e:	e012      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004630:	4b7a      	ldr	r3, [pc, #488]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d107      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 800463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004640:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004644:	d103      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
 800464c:	e003      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004652:	f000 bf1e 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004656:	f000 bf1c 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800465a:	4b70      	ldr	r3, [pc, #448]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800465c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004660:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8004664:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800466c:	f7fd fd8a 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8004670:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8004672:	f000 bf0e 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8004676:	4b69      	ldr	r3, [pc, #420]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800467e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004682:	d10b      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800468a:	d107      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800468c:	f107 0314 	add.w	r3, r7, #20
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff f8e5 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	637b      	str	r3, [r7, #52]	@ 0x34
 800469a:	e047      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800469c:	4b5f      	ldr	r3, [pc, #380]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046a8:	d10b      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b0:	d107      	bne.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046b2:	f107 0308 	add.w	r3, r7, #8
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fa3e 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c0:	e034      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80046c2:	4b56      	ldr	r3, [pc, #344]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d10d      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80046d4:	d109      	bne.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046d6:	4b51      	ldr	r3, [pc, #324]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	08db      	lsrs	r3, r3, #3
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	4a4f      	ldr	r2, [pc, #316]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e8:	e020      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80046ea:	4b4c      	ldr	r3, [pc, #304]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f6:	d106      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046fe:	d102      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8004700:	4b48      	ldr	r3, [pc, #288]	@ (8004824 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004702:	637b      	str	r3, [r7, #52]	@ 0x34
 8004704:	e012      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004706:	4b45      	ldr	r3, [pc, #276]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b02      	cmp	r3, #2
 8004712:	d107      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800471a:	d103      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800471c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004720:	637b      	str	r3, [r7, #52]	@ 0x34
 8004722:	e003      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004728:	f000 beb3 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800472c:	f000 beb1 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004730:	4b3a      	ldr	r3, [pc, #232]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004736:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800473a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004742:	f7fd fd4b 	bl	80021dc <HAL_RCC_GetPCLK3Freq>
 8004746:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004748:	f000 bea3 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004752:	d108      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff f881 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004762:	f000 be96 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800476c:	d108      	bne.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800476e:	f107 0308 	add.w	r3, r7, #8
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff f9e0 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800477c:	f000 be89 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004780:	4b26      	ldr	r3, [pc, #152]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d10d      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004792:	d109      	bne.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004794:	4b21      	ldr	r3, [pc, #132]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	08db      	lsrs	r3, r3, #3
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	4a20      	ldr	r2, [pc, #128]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a6:	e020      	b.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80047a8:	4b1c      	ldr	r3, [pc, #112]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047b4:	d106      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80047b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047bc:	d102      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 80047be:	4b19      	ldr	r3, [pc, #100]	@ (8004824 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 80047c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c2:	e012      	b.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80047c4:	4b15      	ldr	r3, [pc, #84]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80047c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d107      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80047d8:	d103      	bne.n	80047e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 80047da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e0:	e003      	b.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047e6:	f000 be54 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80047ea:	f000 be52 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80047ee:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 80047f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004800:	f7fd fca4 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8004804:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004806:	f000 be44 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10b      	bne.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8004810:	f7fd fb70 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8004814:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004816:	f000 be3c 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800481a:	bf00      	nop
 800481c:	44020c00 	.word	0x44020c00
 8004820:	03d09000 	.word	0x03d09000
 8004824:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	2b02      	cmp	r3, #2
 800482c:	d108      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800482e:	f107 0314 	add.w	r3, r7, #20
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff f814 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800483c:	f000 be29 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004840:	4b9f      	ldr	r3, [pc, #636]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800484c:	d105      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	2b03      	cmp	r3, #3
 8004852:	d102      	bne.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8004854:	4b9b      	ldr	r3, [pc, #620]	@ (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
 8004858:	e023      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800485a:	4b99      	ldr	r3, [pc, #612]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d10c      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	2b04      	cmp	r3, #4
 800486a:	d109      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800486c:	4b94      	ldr	r3, [pc, #592]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	4a94      	ldr	r2, [pc, #592]	@ (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	637b      	str	r3, [r7, #52]	@ 0x34
 800487e:	e010      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004880:	4b8f      	ldr	r3, [pc, #572]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488c:	d105      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	2b05      	cmp	r3, #5
 8004892:	d102      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8004894:	4b8d      	ldr	r3, [pc, #564]	@ (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800489e:	f000 bdf8 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80048a2:	f000 bdf6 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80048a6:	4b86      	ldr	r3, [pc, #536]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80048a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80048b2:	4b83      	ldr	r3, [pc, #524]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80048b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d106      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 80048c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80048cc:	e012      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80048ce:	4b7c      	ldr	r3, [pc, #496]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80048d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048dc:	d106      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d103      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 80048e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80048e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ea:	e003      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80048f0:	f000 bdcf 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80048f4:	f000 bdcd 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80048f8:	4b71      	ldr	r3, [pc, #452]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80048fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004902:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800490a:	f7fd fc3b 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 800490e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004910:	f000 bdbf 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491a:	d108      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800491c:	f107 0308 	add.w	r3, r7, #8
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f909 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800492a:	f000 bdb2 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800492e:	4b64      	ldr	r3, [pc, #400]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d10d      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004940:	d109      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004942:	4b5f      	ldr	r3, [pc, #380]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	08db      	lsrs	r3, r3, #3
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	637b      	str	r3, [r7, #52]	@ 0x34
 8004954:	e011      	b.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8004956:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800495e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004962:	d106      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800496a:	d102      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 800496c:	4b57      	ldr	r3, [pc, #348]	@ (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004970:	e003      	b.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004976:	f000 bd8c 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800497a:	f000 bd8a 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800497e:	4b50      	ldr	r3, [pc, #320]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004980:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004984:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004988:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004990:	f7fd fbf8 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8004994:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004996:	f000 bd7c 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049a0:	d108      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049a2:	f107 0308 	add.w	r3, r7, #8
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff f8c6 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049b0:	f000 bd6f 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80049b4:	4b42      	ldr	r3, [pc, #264]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d10d      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049c6:	d109      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049c8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	08db      	lsrs	r3, r3, #3
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049da:	e011      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80049dc:	4b38      	ldr	r3, [pc, #224]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e8:	d106      	bne.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049f0:	d102      	bne.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 80049f2:	4b36      	ldr	r3, [pc, #216]	@ (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80049f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80049fc:	f000 bd49 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a00:	f000 bd47 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004a04:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a0a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004a0e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8004a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004a16:	f7fd fbe1 	bl	80021dc <HAL_RCC_GetPCLK3Freq>
 8004a1a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a1c:	f000 bd39 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a26:	d108      	bne.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a28:	f107 0308 	add.w	r3, r7, #8
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff f883 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a36:	f000 bd2c 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8004a3a:	4b21      	ldr	r3, [pc, #132]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d10d      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a4c:	d109      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	08db      	lsrs	r3, r3, #3
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a60:	e011      	b.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8004a62:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a76:	d102      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8004a78:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7c:	e003      	b.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a82:	f000 bd06 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a86:	f000 bd04 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004a8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a90:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f7fd fb72 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8004aa0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004aa2:	f000 bcf6 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aac:	d110      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aae:	f107 0308 	add.w	r3, r7, #8
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff f840 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004abc:	f000 bce9 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004ac0:	44020c00 	.word	0x44020c00
 8004ac4:	017d7840 	.word	0x017d7840
 8004ac8:	03d09000 	.word	0x03d09000
 8004acc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8004ad0:	4ba4      	ldr	r3, [pc, #656]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d10e      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ae2:	d10a      	bne.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ae4:	4b9f      	ldr	r3, [pc, #636]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	4a9e      	ldr	r2, [pc, #632]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004af6:	f000 bccc 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004afe:	f000 bcc8 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8004b02:	4b98      	ldr	r3, [pc, #608]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004b04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b08:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004b0c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004b14:	f7fd fb62 	bl	80021dc <HAL_RCC_GetPCLK3Freq>
 8004b18:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b1a:	f000 bcba 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b24:	d108      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff f804 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b34:	f000 bcad 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8004b38:	4b8a      	ldr	r3, [pc, #552]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d10e      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b4a:	d10a      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b4c:	4b85      	ldr	r3, [pc, #532]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	4a84      	ldr	r2, [pc, #528]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b5e:	f000 bc98 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b66:	f000 bc94 	b.w	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b6a:	4b7e      	ldr	r3, [pc, #504]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004b6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b74:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004b7c:	d056      	beq.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004b84:	f200 808b 	bhi.w	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8e:	d03e      	beq.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b96:	f200 8082 	bhi.w	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ba0:	d027      	beq.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ba8:	d879      	bhi.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb0:	d017      	beq.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb8:	d871      	bhi.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc6:	d004      	beq.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8004bc8:	e069      	b.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004bca:	f7fd fb07 	bl	80021dc <HAL_RCC_GetPCLK3Freq>
 8004bce:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004bd0:	e068      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bd2:	f107 0314 	add.w	r3, r7, #20
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fe42 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004be0:	e060      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe ffa6 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004bf0:	e058      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004bf2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d103      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8004c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c06:	e04d      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c0c:	e04a      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004c0e:	4b55      	ldr	r3, [pc, #340]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c1c:	d103      	bne.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8004c1e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004c22:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004c24:	e03e      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004c2a:	e03b      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c32:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004c36:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c38:	4b4a      	ldr	r3, [pc, #296]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d10c      	bne.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 8004c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c4a:	4b46      	ldr	r3, [pc, #280]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	08db      	lsrs	r3, r3, #3
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	4a44      	ldr	r2, [pc, #272]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8004c56:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c5c:	e01e      	b.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c5e:	4b41      	ldr	r3, [pc, #260]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c72:	d102      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004c74:	4b3d      	ldr	r3, [pc, #244]	@ (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c78:	e010      	b.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c86:	d106      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8004c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c8e:	d102      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004c90:	4b37      	ldr	r3, [pc, #220]	@ (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 8004c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004c9a:	e003      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004ca2:	bf00      	nop
          }
        }
        break;
 8004ca4:	e3f5      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004ca8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004cac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004cb0:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cb8:	d05f      	beq.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cc0:	f200 8094 	bhi.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cca:	d03f      	beq.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd2:	f200 808b 	bhi.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cdc:	d028      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ce4:	f200 8082 	bhi.w	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cee:	d017      	beq.n	8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	d879      	bhi.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d004      	beq.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d04:	d004      	beq.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8004d06:	e071      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7fd fa3c 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8004d0e:	e070      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d10:	f107 0314 	add.w	r3, r7, #20
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe fda3 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d1e:	e068      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe ff07 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d2e:	e060      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d30:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d103      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 8004d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d42:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d44:	e055      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d4a:	e052      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8004d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d5a:	d10b      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 8004d5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d60:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8004d62:	e046      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8004d64:	44020c00 	.word	0x44020c00
 8004d68:	03d09000 	.word	0x03d09000
 8004d6c:	003d0900 	.word	0x003d0900
 8004d70:	017d7840 	.word	0x017d7840
              frequency = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004d78:	e03b      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d7a:	4bae      	ldr	r3, [pc, #696]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d80:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d84:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d86:	4bab      	ldr	r3, [pc, #684]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d10c      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d98:	4ba6      	ldr	r3, [pc, #664]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	08db      	lsrs	r3, r3, #3
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	4aa5      	ldr	r2, [pc, #660]	@ (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004daa:	e01e      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dac:	4ba1      	ldr	r3, [pc, #644]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db8:	d106      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004dc2:	4b9e      	ldr	r3, [pc, #632]	@ (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8004dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc6:	e010      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dc8:	4b9a      	ldr	r3, [pc, #616]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8004dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004dde:	4b98      	ldr	r3, [pc, #608]	@ (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de2:	e002      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004de8:	e003      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8004dea:	e002      	b.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004df0:	bf00      	nop
          }
        }
        break;
 8004df2:	e34e      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004df4:	4b8f      	ldr	r3, [pc, #572]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dfe:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004e00:	4b8c      	ldr	r3, [pc, #560]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e0c:	d105      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8004e14:	4b8a      	ldr	r3, [pc, #552]	@ (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8004e18:	e33b      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e20:	d107      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e22:	f107 0320 	add.w	r3, r7, #32
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe fbae 	bl	8003588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e30:	e32f      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e38:	d107      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e3a:	f107 0314 	add.w	r3, r7, #20
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fd0e 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e48:	e323      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e4e:	e320      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004e50:	4b78      	ldr	r3, [pc, #480]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d860      	bhi.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 8004e62:	a201      	add	r2, pc, #4	@ (adr r2, 8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e7d 	.word	0x08004e7d
 8004e6c:	08004e8d 	.word	0x08004e8d
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	08004ead 	.word	0x08004ead
 8004e78:	08004eb3 	.word	0x08004eb3
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e7c:	f107 0320 	add.w	r3, r7, #32
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe fb81 	bl	8003588 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e8a:	e04e      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe fce5 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004e9a:	e046      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fe49 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004eaa:	e03e      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004eac:	4b65      	ldr	r3, [pc, #404]	@ (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004eb0:	e03b      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004eb2:	4b60      	ldr	r3, [pc, #384]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eb8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8004eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ed0:	4b58      	ldr	r3, [pc, #352]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	08db      	lsrs	r3, r3, #3
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	4a57      	ldr	r2, [pc, #348]	@ (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ee2:	e01e      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ee4:	4b53      	ldr	r3, [pc, #332]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef0:	d106      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8004ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef8:	d102      	bne.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004efa:	4b50      	ldr	r3, [pc, #320]	@ (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efe:	e010      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f00:	4b4c      	ldr	r3, [pc, #304]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8004f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f14:	d102      	bne.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004f16:	4b4a      	ldr	r3, [pc, #296]	@ (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8004f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1a:	e002      	b.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8004f20:	e003      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8004f22:	e002      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004f28:	bf00      	nop
          }
        }
        break;
 8004f2a:	e2b2      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004f2c:	4b41      	ldr	r3, [pc, #260]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8004f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f36:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	f200 80a4 	bhi.w	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 8004f40:	a201      	add	r2, pc, #4	@ (adr r2, 8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004fcd 	.word	0x08004fcd
 8004f4c:	08005089 	.word	0x08005089
 8004f50:	08005089 	.word	0x08005089
 8004f54:	08005089 	.word	0x08005089
 8004f58:	08005089 	.word	0x08005089
 8004f5c:	08005089 	.word	0x08005089
 8004f60:	08005089 	.word	0x08005089
 8004f64:	08005089 	.word	0x08005089
 8004f68:	08004fdd 	.word	0x08004fdd
 8004f6c:	08005089 	.word	0x08005089
 8004f70:	08005089 	.word	0x08005089
 8004f74:	08005089 	.word	0x08005089
 8004f78:	08005089 	.word	0x08005089
 8004f7c:	08005089 	.word	0x08005089
 8004f80:	08005089 	.word	0x08005089
 8004f84:	08005089 	.word	0x08005089
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	08005089 	.word	0x08005089
 8004f90:	08005089 	.word	0x08005089
 8004f94:	08005089 	.word	0x08005089
 8004f98:	08005089 	.word	0x08005089
 8004f9c:	08005089 	.word	0x08005089
 8004fa0:	08005089 	.word	0x08005089
 8004fa4:	08005089 	.word	0x08005089
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08005089 	.word	0x08005089
 8004fb0:	08005089 	.word	0x08005089
 8004fb4:	08005089 	.word	0x08005089
 8004fb8:	08005089 	.word	0x08005089
 8004fbc:	08005089 	.word	0x08005089
 8004fc0:	08005089 	.word	0x08005089
 8004fc4:	08005089 	.word	0x08005089
 8004fc8:	08005003 	.word	0x08005003
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fcc:	f107 0320 	add.w	r3, r7, #32
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fad9 	bl	8003588 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fda:	e058      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fdc:	f107 0314 	add.w	r3, r7, #20
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe fc3d 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004fea:	e050      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fec:	f107 0308 	add.w	r3, r7, #8
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe fda1 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8004ffa:	e048      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004ffc:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8004ffe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005000:	e045      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005002:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005008:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800500c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800500e:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d116      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 800501a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d113      	bne.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005020:	4b04      	ldr	r3, [pc, #16]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	08db      	lsrs	r3, r3, #3
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	4a03      	ldr	r2, [pc, #12]	@ (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
 8005030:	637b      	str	r3, [r7, #52]	@ 0x34
 8005032:	e028      	b.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005034:	44020c00 	.word	0x44020c00
 8005038:	03d09000 	.word	0x03d09000
 800503c:	003d0900 	.word	0x003d0900
 8005040:	017d7840 	.word	0x017d7840
 8005044:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005048:	4b95      	ldr	r3, [pc, #596]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005054:	d106      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505c:	d102      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800505e:	4b91      	ldr	r3, [pc, #580]	@ (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005060:	637b      	str	r3, [r7, #52]	@ 0x34
 8005062:	e010      	b.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005064:	4b8e      	ldr	r3, [pc, #568]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005070:	d106      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8005072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005078:	d102      	bne.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800507a:	4b8b      	ldr	r3, [pc, #556]	@ (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800507c:	637b      	str	r3, [r7, #52]	@ 0x34
 800507e:	e002      	b.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005084:	e003      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8005086:	e002      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800508c:	bf00      	nop
          }
        }
        break;
 800508e:	e200      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005090:	4b83      	ldr	r3, [pc, #524]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005096:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800509a:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a2:	d031      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050aa:	d866      	bhi.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80050b0:	d027      	beq.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80050b6:	d860      	bhi.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	2b80      	cmp	r3, #128	@ 0x80
 80050bc:	d019      	beq.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 80050be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d85a      	bhi.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d008      	beq.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 80050d0:	e053      	b.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050d2:	f107 0320 	add.w	r3, r7, #32
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fa56 	bl	8003588 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050e0:	e04e      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050e2:	f107 0314 	add.w	r3, r7, #20
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fbba 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80050f0:	e046      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050f2:	f107 0308 	add.w	r3, r7, #8
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fd1e 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005100:	e03e      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005102:	4b6a      	ldr	r3, [pc, #424]	@ (80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005106:	e03b      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005108:	4b65      	ldr	r3, [pc, #404]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800510a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800510e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005112:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005114:	4b62      	ldr	r3, [pc, #392]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b02      	cmp	r3, #2
 800511e:	d10c      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005126:	4b5e      	ldr	r3, [pc, #376]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	08db      	lsrs	r3, r3, #3
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	4a5f      	ldr	r2, [pc, #380]	@ (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005132:	fa22 f303 	lsr.w	r3, r2, r3
 8005136:	637b      	str	r3, [r7, #52]	@ 0x34
 8005138:	e01e      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800513a:	4b59      	ldr	r3, [pc, #356]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005146:	d106      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8005148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514e:	d102      	bne.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005150:	4b54      	ldr	r3, [pc, #336]	@ (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	e010      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005156:	4b52      	ldr	r3, [pc, #328]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005162:	d106      	bne.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 8005164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005166:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800516a:	d102      	bne.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800516c:	4b4e      	ldr	r3, [pc, #312]	@ (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 800516e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005176:	e003      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8005178:	e002      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800517e:	bf00      	nop
          }
        }
        break;
 8005180:	e187      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8005182:	4b47      	ldr	r3, [pc, #284]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005188:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800518c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800518e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005194:	f7fd f80c 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8005198:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800519a:	e17a      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800519c:	4b40      	ldr	r3, [pc, #256]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051a8:	d10b      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b0:	d107      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051b2:	f107 0314 	add.w	r3, r7, #20
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fb52 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c0:	e045      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80051c2:	4b37      	ldr	r3, [pc, #220]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ce:	d10b      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d6:	d107      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d8:	f107 0308 	add.w	r3, r7, #8
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fcab 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e6:	e032      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80051e8:	4b2d      	ldr	r3, [pc, #180]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d10d      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80051fa:	d109      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051fc:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	08db      	lsrs	r3, r3, #3
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	4a2a      	ldr	r2, [pc, #168]	@ (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	637b      	str	r3, [r7, #52]	@ 0x34
 800520e:	e01e      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005210:	4b23      	ldr	r3, [pc, #140]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800521c:	d106      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005224:	d102      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8005226:	4b1f      	ldr	r3, [pc, #124]	@ (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005228:	637b      	str	r3, [r7, #52]	@ 0x34
 800522a:	e010      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800522c:	4b1c      	ldr	r3, [pc, #112]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005238:	d106      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005240:	d102      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 8005242:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
 8005246:	e002      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800524c:	e121      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800524e:	e120      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005250:	4b13      	ldr	r3, [pc, #76]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005252:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	2b03      	cmp	r3, #3
 8005260:	d861      	bhi.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8005262:	a201      	add	r2, pc, #4	@ (adr r2, 8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	08005279 	.word	0x08005279
 800526c:	08005281 	.word	0x08005281
 8005270:	08005291 	.word	0x08005291
 8005274:	080052b5 	.word	0x080052b5
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8005278:	f7fc ff68 	bl	800214c <HAL_RCC_GetHCLKFreq>
 800527c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800527e:	e055      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005280:	f107 0320 	add.w	r3, r7, #32
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe f97f 	bl	8003588 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800528e:	e04d      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005290:	f107 0314 	add.w	r3, r7, #20
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe fae3 	bl	8003860 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800529e:	e045      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80052a0:	44020c00 	.word	0x44020c00
 80052a4:	003d0900 	.word	0x003d0900
 80052a8:	017d7840 	.word	0x017d7840
 80052ac:	00bb8000 	.word	0x00bb8000
 80052b0:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052b4:	4b79      	ldr	r3, [pc, #484]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80052b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80052be:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052c0:	4b76      	ldr	r3, [pc, #472]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d10c      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 80052cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052d2:	4b72      	ldr	r3, [pc, #456]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	08db      	lsrs	r3, r3, #3
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	4a70      	ldr	r2, [pc, #448]	@ (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 80052de:	fa22 f303 	lsr.w	r3, r2, r3
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e4:	e01e      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052e6:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f2:	d106      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 80052f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fa:	d102      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80052fc:	4b69      	ldr	r3, [pc, #420]	@ (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 80052fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005300:	e010      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005302:	4b66      	ldr	r3, [pc, #408]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800530e:	d106      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005316:	d102      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005318:	4b63      	ldr	r3, [pc, #396]	@ (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
 800531c:	e002      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005322:	e003      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005324:	e002      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800532a:	bf00      	nop
          }
        }
        break;
 800532c:	e0b1      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800532e:	4b5b      	ldr	r3, [pc, #364]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005334:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005338:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800533a:	4b58      	ldr	r3, [pc, #352]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800533c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b02      	cmp	r3, #2
 8005346:	d106      	bne.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 800534e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
 8005354:	e01f      	b.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8005356:	4b51      	ldr	r3, [pc, #324]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800535c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005364:	d106      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	2b40      	cmp	r3, #64	@ 0x40
 800536a:	d103      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 800536c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005370:	637b      	str	r3, [r7, #52]	@ 0x34
 8005372:	e010      	b.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8005374:	4b49      	ldr	r3, [pc, #292]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800537c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005380:	d106      	bne.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	2b80      	cmp	r3, #128	@ 0x80
 8005386:	d103      	bne.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8005388:	f248 0312 	movw	r3, #32786	@ 0x8012
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
 800538e:	e002      	b.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005394:	e07d      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005396:	e07c      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005398:	4b40      	ldr	r3, [pc, #256]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800539a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800539e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80053a4:	4b3d      	ldr	r3, [pc, #244]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b0:	d105      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 80053b8:	4b3c      	ldr	r3, [pc, #240]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 80053ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80053bc:	e031      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80053be:	4b37      	ldr	r3, [pc, #220]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053ca:	d10a      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d107      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053d2:	f107 0320 	add.w	r3, r7, #32
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe f8d6 	bl	8003588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053de:	637b      	str	r3, [r7, #52]	@ 0x34
 80053e0:	e01f      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80053e2:	4b2e      	ldr	r3, [pc, #184]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80053e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d106      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d103      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 80053f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fc:	e011      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80053fe:	4b27      	ldr	r3, [pc, #156]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800540c:	d106      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	2b30      	cmp	r3, #48	@ 0x30
 8005412:	d103      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8005414:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005418:	637b      	str	r3, [r7, #52]	@ 0x34
 800541a:	e002      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005420:	e037      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005422:	e036      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005424:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005426:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800542a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800542e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	2b10      	cmp	r3, #16
 8005434:	d107      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005436:	f107 0320 	add.w	r3, r7, #32
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe f8a4 	bl	8003588 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005444:	e025      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8005446:	4b15      	ldr	r3, [pc, #84]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800544e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005452:	d10a      	bne.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	2b20      	cmp	r3, #32
 8005458:	d107      	bne.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fb6a 	bl	8003b38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
 8005468:	e00f      	b.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800546a:	4b0c      	ldr	r3, [pc, #48]	@ (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005476:	d105      	bne.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	2b30      	cmp	r3, #48	@ 0x30
 800547c:	d102      	bne.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 800547e:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005480:	637b      	str	r3, [r7, #52]	@ 0x34
 8005482:	e002      	b.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005488:	e003      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800548a:	e002      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005490:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8005492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005494:	4618      	mov	r0, r3
 8005496:	373c      	adds	r7, #60	@ 0x3c
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}
 800549c:	44020c00 	.word	0x44020c00
 80054a0:	03d09000 	.word	0x03d09000
 80054a4:	003d0900 	.word	0x003d0900
 80054a8:	017d7840 	.word	0x017d7840
 80054ac:	02dc6c00 	.word	0x02dc6c00

080054b0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80054b8:	4b48      	ldr	r3, [pc, #288]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a47      	ldr	r2, [pc, #284]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 80054be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054c4:	f7fb fb86 	bl	8000bd4 <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054ca:	e008      	b.n	80054de <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054cc:	f7fb fb82 	bl	8000bd4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e07a      	b.n	80055d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054de:	4b3f      	ldr	r3, [pc, #252]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f0      	bne.n	80054cc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80054ea:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6811      	ldr	r1, [r2, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6852      	ldr	r2, [r2, #4]
 80054fe:	0212      	lsls	r2, r2, #8
 8005500:	430a      	orrs	r2, r1
 8005502:	4936      	ldr	r1, [pc, #216]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	3b01      	subs	r3, #1
 800550e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	3b01      	subs	r3, #1
 8005518:	025b      	lsls	r3, r3, #9
 800551a:	b29b      	uxth	r3, r3
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	3b01      	subs	r3, #1
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	3b01      	subs	r3, #1
 8005532:	061b      	lsls	r3, r3, #24
 8005534:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005538:	4928      	ldr	r1, [pc, #160]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 800553a:	4313      	orrs	r3, r2
 800553c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800553e:	4b27      	ldr	r3, [pc, #156]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005542:	f023 020c 	bic.w	r2, r3, #12
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	4924      	ldr	r1, [pc, #144]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 800554c:	4313      	orrs	r3, r2
 800554e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005550:	4b22      	ldr	r3, [pc, #136]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	f023 0220 	bic.w	r2, r3, #32
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	491f      	ldr	r1, [pc, #124]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 800555e:	4313      	orrs	r3, r2
 8005560:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005562:	4b1e      	ldr	r3, [pc, #120]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 8005564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	491c      	ldr	r1, [pc, #112]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 800556c:	4313      	orrs	r3, r2
 800556e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005570:	4b1a      	ldr	r3, [pc, #104]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	4a19      	ldr	r2, [pc, #100]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800557c:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005584:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6a12      	ldr	r2, [r2, #32]
 800558c:	00d2      	lsls	r2, r2, #3
 800558e:	4913      	ldr	r1, [pc, #76]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005594:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 8005596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005598:	4a10      	ldr	r2, [pc, #64]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 800559a:	f043 0310 	orr.w	r3, r3, #16
 800559e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80055a0:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a0d      	ldr	r2, [pc, #52]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 80055a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055ac:	f7fb fb12 	bl	8000bd4 <HAL_GetTick>
 80055b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055b2:	e008      	b.n	80055c6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055b4:	f7fb fb0e 	bl	8000bd4 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e006      	b.n	80055d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055c6:	4b05      	ldr	r3, [pc, #20]	@ (80055dc <RCCEx_PLL2_Config+0x12c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0

}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	44020c00 	.word	0x44020c00

080055e0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80055e8:	4b48      	ldr	r3, [pc, #288]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a47      	ldr	r2, [pc, #284]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80055ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055f4:	f7fb faee 	bl	8000bd4 <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055fa:	e008      	b.n	800560e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055fc:	f7fb faea 	bl	8000bd4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e07a      	b.n	8005704 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800560e:	4b3f      	ldr	r3, [pc, #252]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800561a:	4b3c      	ldr	r3, [pc, #240]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6811      	ldr	r1, [r2, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6852      	ldr	r2, [r2, #4]
 800562e:	0212      	lsls	r2, r2, #8
 8005630:	430a      	orrs	r2, r1
 8005632:	4936      	ldr	r1, [pc, #216]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 8005634:	4313      	orrs	r3, r2
 8005636:	630b      	str	r3, [r1, #48]	@ 0x30
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	3b01      	subs	r3, #1
 800563e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	025b      	lsls	r3, r3, #9
 800564a:	b29b      	uxth	r3, r3
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	3b01      	subs	r3, #1
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	3b01      	subs	r3, #1
 8005662:	061b      	lsls	r3, r3, #24
 8005664:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005668:	4928      	ldr	r1, [pc, #160]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 800566a:	4313      	orrs	r3, r2
 800566c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800566e:	4b27      	ldr	r3, [pc, #156]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005672:	f023 020c 	bic.w	r2, r3, #12
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	4924      	ldr	r1, [pc, #144]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 800567c:	4313      	orrs	r3, r2
 800567e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005680:	4b22      	ldr	r3, [pc, #136]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005684:	f023 0220 	bic.w	r2, r3, #32
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	491f      	ldr	r1, [pc, #124]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 800568e:	4313      	orrs	r3, r2
 8005690:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005692:	4b1e      	ldr	r3, [pc, #120]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 8005694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	491c      	ldr	r1, [pc, #112]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 800569c:	4313      	orrs	r3, r2
 800569e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80056a0:	4b1a      	ldr	r3, [pc, #104]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a4:	4a19      	ldr	r2, [pc, #100]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056a6:	f023 0310 	bic.w	r3, r3, #16
 80056aa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80056ac:	4b17      	ldr	r3, [pc, #92]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056b4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6a12      	ldr	r2, [r2, #32]
 80056bc:	00d2      	lsls	r2, r2, #3
 80056be:	4913      	ldr	r1, [pc, #76]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80056c4:	4b11      	ldr	r3, [pc, #68]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c8:	4a10      	ldr	r2, [pc, #64]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056ca:	f043 0310 	orr.w	r3, r3, #16
 80056ce:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80056d0:	4b0e      	ldr	r3, [pc, #56]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a0d      	ldr	r2, [pc, #52]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056dc:	f7fb fa7a 	bl	8000bd4 <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056e2:	e008      	b.n	80056f6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056e4:	f7fb fa76 	bl	8000bd4 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e006      	b.n	8005704 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056f6:	4b05      	ldr	r3, [pc, #20]	@ (800570c <RCCEx_PLL3_Config+0x12c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	44020c00 	.word	0x44020c00

08005710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e042      	b.n	80057a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fb f84b 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2224      	movs	r2, #36	@ 0x24
 800573e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fce4 	bl	8006128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fb33 	bl	8005dcc <UART_SetConfig>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e01b      	b.n	80057a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800577e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800578e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fd63 	bl	800626c <UART_CheckIdleState>
 80057a6:	4603      	mov	r3, r0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b0ae      	sub	sp, #184	@ 0xb8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057de:	4013      	ands	r3, r2
 80057e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80057e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d11b      	bne.n	8005824 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d015      	beq.n	8005824 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 82ac 	beq.w	8005d72 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
      }
      return;
 8005822:	e2a6      	b.n	8005d72 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 80fd 	beq.w	8005a28 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800582e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005832:	4b7a      	ldr	r3, [pc, #488]	@ (8005a1c <HAL_UART_IRQHandler+0x26c>)
 8005834:	4013      	ands	r3, r2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800583a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800583e:	4b78      	ldr	r3, [pc, #480]	@ (8005a20 <HAL_UART_IRQHandler+0x270>)
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80f0 	beq.w	8005a28 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d011      	beq.n	8005878 <HAL_UART_IRQHandler+0xc8>
 8005854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2201      	movs	r2, #1
 8005866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586e:	f043 0201 	orr.w	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005878:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d011      	beq.n	80058a8 <HAL_UART_IRQHandler+0xf8>
 8005884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2202      	movs	r2, #2
 8005896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589e:	f043 0204 	orr.w	r2, r3, #4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d011      	beq.n	80058d8 <HAL_UART_IRQHandler+0x128>
 80058b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2204      	movs	r2, #4
 80058c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ce:	f043 0202 	orr.w	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d017      	beq.n	8005914 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058f4:	4b49      	ldr	r3, [pc, #292]	@ (8005a1c <HAL_UART_IRQHandler+0x26c>)
 80058f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2208      	movs	r2, #8
 8005902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590a:	f043 0208 	orr.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800591c:	2b00      	cmp	r3, #0
 800591e:	d012      	beq.n	8005946 <HAL_UART_IRQHandler+0x196>
 8005920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005924:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00c      	beq.n	8005946 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593c:	f043 0220 	orr.w	r2, r3, #32
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8212 	beq.w	8005d76 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b00      	cmp	r3, #0
 800595c:	d013      	beq.n	8005986 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800595e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800596a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800596e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599a:	2b40      	cmp	r3, #64	@ 0x40
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800599e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d02e      	beq.n	8005a08 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fd75 	bl	800649a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ba:	2b40      	cmp	r3, #64	@ 0x40
 80059bc:	d120      	bne.n	8005a00 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ce:	4a15      	ldr	r2, [pc, #84]	@ (8005a24 <HAL_UART_IRQHandler+0x274>)
 80059d0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fb fb13 	bl	8001004 <HAL_DMA_Abort_IT>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d019      	beq.n	8005a18 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80059f2:	4610      	mov	r0, r2
 80059f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f6:	e00f      	b.n	8005a18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f9d1 	bl	8005da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fe:	e00b      	b.n	8005a18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f9cd 	bl	8005da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a06:	e007      	b.n	8005a18 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f9c9 	bl	8005da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a16:	e1ae      	b.n	8005d76 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	bf00      	nop
    return;
 8005a1a:	e1ac      	b.n	8005d76 <HAL_UART_IRQHandler+0x5c6>
 8005a1c:	10000001 	.word	0x10000001
 8005a20:	04000120 	.word	0x04000120
 8005a24:	08006567 	.word	0x08006567

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	f040 8142 	bne.w	8005cb6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 813b 	beq.w	8005cb6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8134 	beq.w	8005cb6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2210      	movs	r2, #16
 8005a54:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a60:	2b40      	cmp	r3, #64	@ 0x40
 8005a62:	f040 80aa 	bne.w	8005bba <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a70:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8005a74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 8084 	beq.w	8005b86 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a84:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d27c      	bcs.n	8005b86 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005a92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9e:	2b81      	cmp	r3, #129	@ 0x81
 8005aa0:	d060      	beq.n	8005b64 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ab0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ab2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ac4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ac8:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e2      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005b00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e3      	bne.n	8005adc <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b32:	f023 0310 	bic.w	r3, r3, #16
 8005b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e4      	bne.n	8005b22 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fb f9d4 	bl	8000f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f918 	bl	8005db4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b84:	e0f9      	b.n	8005d7a <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b8c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8005b90:	429a      	cmp	r2, r3
 8005b92:	f040 80f2 	bne.w	8005d7a <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9e:	2b81      	cmp	r3, #129	@ 0x81
 8005ba0:	f040 80eb 	bne.w	8005d7a <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f8fe 	bl	8005db4 <HAL_UARTEx_RxEventCallback>
      return;
 8005bb8:	e0df      	b.n	8005d7a <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80d1 	beq.w	8005d7e <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8005bdc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80cc 	beq.w	8005d7e <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e4      	bne.n	8005be6 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3308      	adds	r3, #8
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005c44:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e1      	bne.n	8005c1c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f023 0310 	bic.w	r3, r3, #16
 8005c80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	69b9      	ldr	r1, [r7, #24]
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e4      	bne.n	8005c6c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ca8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f880 	bl	8005db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cb4:	e063      	b.n	8005d7e <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x530>
 8005cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005cd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fc81 	bl	80065e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cde:	e051      	b.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d014      	beq.n	8005d16 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005cec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d03a      	beq.n	8005d82 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
    }
    return;
 8005d14:	e035      	b.n	8005d82 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_UART_IRQHandler+0x586>
 8005d22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fc2b 	bl	800658a <UART_EndTransmit_IT>
    return;
 8005d34:	e026      	b.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_UART_IRQHandler+0x5a6>
 8005d42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fc5a 	bl	8006608 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d54:	e016      	b.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d010      	beq.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
 8005d62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da0c      	bge.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fc42 	bl	80065f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d70:	e008      	b.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005d72:	bf00      	nop
 8005d74:	e006      	b.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005d76:	bf00      	nop
 8005d78:	e004      	b.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005d7a:	bf00      	nop
 8005d7c:	e002      	b.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
      return;
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <HAL_UART_IRQHandler+0x5d4>
    return;
 8005d82:	bf00      	nop
  }
}
 8005d84:	37b8      	adds	r7, #184	@ 0xb8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop

08005d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd0:	b094      	sub	sp, #80	@ 0x50
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4b83      	ldr	r3, [pc, #524]	@ (8005ff0 <UART_SetConfig+0x224>)
 8005de2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	497c      	ldr	r1, [pc, #496]	@ (8005ff4 <UART_SetConfig+0x228>)
 8005e04:	4019      	ands	r1, r3
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1c:	68d9      	ldr	r1, [r3, #12]
 8005e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	ea40 0301 	orr.w	r3, r0, r1
 8005e26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	4b6f      	ldr	r3, [pc, #444]	@ (8005ff0 <UART_SetConfig+0x224>)
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d009      	beq.n	8005e4c <UART_SetConfig+0x80>
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ff8 <UART_SetConfig+0x22c>)
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d004      	beq.n	8005e4c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e44:	6a1a      	ldr	r2, [r3, #32]
 8005e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8005e56:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e60:	430b      	orrs	r3, r1
 8005e62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	f023 000f 	bic.w	r0, r3, #15
 8005e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	ea40 0301 	orr.w	r3, r0, r1
 8005e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b5e      	ldr	r3, [pc, #376]	@ (8005ffc <UART_SetConfig+0x230>)
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d102      	bne.n	8005e8c <UART_SetConfig+0xc0>
 8005e86:	2301      	movs	r3, #1
 8005e88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e8a:	e032      	b.n	8005ef2 <UART_SetConfig+0x126>
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b5b      	ldr	r3, [pc, #364]	@ (8006000 <UART_SetConfig+0x234>)
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d102      	bne.n	8005e9c <UART_SetConfig+0xd0>
 8005e96:	2302      	movs	r3, #2
 8005e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e9a:	e02a      	b.n	8005ef2 <UART_SetConfig+0x126>
 8005e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4b58      	ldr	r3, [pc, #352]	@ (8006004 <UART_SetConfig+0x238>)
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d102      	bne.n	8005eac <UART_SetConfig+0xe0>
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eaa:	e022      	b.n	8005ef2 <UART_SetConfig+0x126>
 8005eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b55      	ldr	r3, [pc, #340]	@ (8006008 <UART_SetConfig+0x23c>)
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d102      	bne.n	8005ebc <UART_SetConfig+0xf0>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eba:	e01a      	b.n	8005ef2 <UART_SetConfig+0x126>
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b52      	ldr	r3, [pc, #328]	@ (800600c <UART_SetConfig+0x240>)
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d102      	bne.n	8005ecc <UART_SetConfig+0x100>
 8005ec6:	2310      	movs	r3, #16
 8005ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eca:	e012      	b.n	8005ef2 <UART_SetConfig+0x126>
 8005ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8006010 <UART_SetConfig+0x244>)
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d102      	bne.n	8005edc <UART_SetConfig+0x110>
 8005ed6:	2320      	movs	r3, #32
 8005ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eda:	e00a      	b.n	8005ef2 <UART_SetConfig+0x126>
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b43      	ldr	r3, [pc, #268]	@ (8005ff0 <UART_SetConfig+0x224>)
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d103      	bne.n	8005eee <UART_SetConfig+0x122>
 8005ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eec:	e001      	b.n	8005ef2 <UART_SetConfig+0x126>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff0 <UART_SetConfig+0x224>)
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d005      	beq.n	8005f08 <UART_SetConfig+0x13c>
 8005efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b3d      	ldr	r3, [pc, #244]	@ (8005ff8 <UART_SetConfig+0x22c>)
 8005f02:	429a      	cmp	r2, r3
 8005f04:	f040 8088 	bne.w	8006018 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f14:	f7fd ff7c 	bl	8003e10 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f18:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80eb 	beq.w	80060f8 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	4a3b      	ldr	r2, [pc, #236]	@ (8006014 <UART_SetConfig+0x248>)
 8005f28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f34:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d305      	bcc.n	8005f52 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d903      	bls.n	8005f5a <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005f58:	e048      	b.n	8005fec <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	61fa      	str	r2, [r7, #28]
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f66:	4a2b      	ldr	r2, [pc, #172]	@ (8006014 <UART_SetConfig+0x248>)
 8005f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2200      	movs	r2, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	617a      	str	r2, [r7, #20]
 8005f74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005f7c:	f7fa f98a 	bl	8000294 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4610      	mov	r0, r2
 8005f86:	4619      	mov	r1, r3
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	020b      	lsls	r3, r1, #8
 8005f92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f96:	0202      	lsls	r2, r0, #8
 8005f98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f9a:	6849      	ldr	r1, [r1, #4]
 8005f9c:	0849      	lsrs	r1, r1, #1
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	eb12 0804 	adds.w	r8, r2, r4
 8005fa8:	eb43 0905 	adc.w	r9, r3, r5
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	60fa      	str	r2, [r7, #12]
 8005fb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa f969 	bl	8000294 <__aeabi_uldivmod>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd0:	d308      	bcc.n	8005fe4 <UART_SetConfig+0x218>
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd8:	d204      	bcs.n	8005fe4 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	e003      	b.n	8005fec <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8005fea:	e085      	b.n	80060f8 <UART_SetConfig+0x32c>
 8005fec:	e084      	b.n	80060f8 <UART_SetConfig+0x32c>
 8005fee:	bf00      	nop
 8005ff0:	44002400 	.word	0x44002400
 8005ff4:	cfff69f3 	.word	0xcfff69f3
 8005ff8:	54002400 	.word	0x54002400
 8005ffc:	40013800 	.word	0x40013800
 8006000:	40004400 	.word	0x40004400
 8006004:	40004800 	.word	0x40004800
 8006008:	40004c00 	.word	0x40004c00
 800600c:	40005000 	.word	0x40005000
 8006010:	40006400 	.word	0x40006400
 8006014:	080068ac 	.word	0x080068ac
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006020:	d13c      	bne.n	800609c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006024:	2200      	movs	r2, #0
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800602e:	f7fd feef 	bl	8003e10 <HAL_RCCEx_GetPeriphCLKFreq>
 8006032:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d05e      	beq.n	80060f8 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	4a39      	ldr	r2, [pc, #228]	@ (8006124 <UART_SetConfig+0x358>)
 8006040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006044:	461a      	mov	r2, r3
 8006046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006048:	fbb3 f3f2 	udiv	r3, r3, r2
 800604c:	005a      	lsls	r2, r3, #1
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	441a      	add	r2, r3
 8006056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	fbb2 f3f3 	udiv	r3, r2, r3
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006062:	2b0f      	cmp	r3, #15
 8006064:	d916      	bls.n	8006094 <UART_SetConfig+0x2c8>
 8006066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800606c:	d212      	bcs.n	8006094 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800606e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006070:	b29b      	uxth	r3, r3
 8006072:	f023 030f 	bic.w	r3, r3, #15
 8006076:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	b29a      	uxth	r2, r3
 8006084:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006086:	4313      	orrs	r3, r2
 8006088:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006090:	60da      	str	r2, [r3, #12]
 8006092:	e031      	b.n	80060f8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800609a:	e02d      	b.n	80060f8 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800609c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609e:	2200      	movs	r2, #0
 80060a0:	469a      	mov	sl, r3
 80060a2:	4693      	mov	fp, r2
 80060a4:	4650      	mov	r0, sl
 80060a6:	4659      	mov	r1, fp
 80060a8:	f7fd feb2 	bl	8003e10 <HAL_RCCEx_GetPeriphCLKFreq>
 80060ac:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80060ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d021      	beq.n	80060f8 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006124 <UART_SetConfig+0x358>)
 80060ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060be:	461a      	mov	r2, r3
 80060c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80060c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	441a      	add	r2, r3
 80060ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060da:	2b0f      	cmp	r3, #15
 80060dc:	d909      	bls.n	80060f2 <UART_SetConfig+0x326>
 80060de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e4:	d205      	bcs.n	80060f2 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60da      	str	r2, [r3, #12]
 80060f0:	e002      	b.n	80060f8 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fa:	2201      	movs	r2, #1
 80060fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006102:	2201      	movs	r2, #1
 8006104:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	2200      	movs	r2, #0
 800610c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800610e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006110:	2200      	movs	r2, #0
 8006112:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006114:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006118:	4618      	mov	r0, r3
 800611a:	3750      	adds	r7, #80	@ 0x50
 800611c:	46bd      	mov	sp, r7
 800611e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006122:	bf00      	nop
 8006124:	080068ac 	.word	0x080068ac

08006128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01a      	beq.n	800623e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006226:	d10a      	bne.n	800623e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b098      	sub	sp, #96	@ 0x60
 8006270:	af02      	add	r7, sp, #8
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800627c:	f7fa fcaa 	bl	8000bd4 <HAL_GetTick>
 8006280:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b08      	cmp	r3, #8
 800628e:	d12f      	bne.n	80062f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006290:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006298:	2200      	movs	r2, #0
 800629a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f88e 	bl	80063c0 <UART_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d022      	beq.n	80062f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062be:	653b      	str	r3, [r7, #80]	@ 0x50
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e6      	bne.n	80062aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e063      	b.n	80063b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d149      	bne.n	8006392 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006306:	2200      	movs	r2, #0
 8006308:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f857 	bl	80063c0 <UART_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d03c      	beq.n	8006392 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	623b      	str	r3, [r7, #32]
   return(result);
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006336:	633b      	str	r3, [r7, #48]	@ 0x30
 8006338:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800633c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e6      	bne.n	8006318 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	60fb      	str	r3, [r7, #12]
   return(result);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800636a:	61fa      	str	r2, [r7, #28]
 800636c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	69b9      	ldr	r1, [r7, #24]
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	617b      	str	r3, [r7, #20]
   return(result);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e012      	b.n	80063b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3758      	adds	r7, #88	@ 0x58
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d0:	e04f      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d04b      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fa fbfb 	bl	8000bd4 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e04e      	b.n	8006492 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d037      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b80      	cmp	r3, #128	@ 0x80
 8006406:	d034      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b40      	cmp	r3, #64	@ 0x40
 800640c:	d031      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b08      	cmp	r3, #8
 800641a:	d110      	bne.n	800643e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2208      	movs	r2, #8
 8006422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f838 	bl	800649a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2208      	movs	r2, #8
 800642e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e029      	b.n	8006492 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644c:	d111      	bne.n	8006472 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f81e 	bl	800649a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e00f      	b.n	8006492 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4013      	ands	r3, r2
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	429a      	cmp	r2, r3
 8006480:	bf0c      	ite	eq
 8006482:	2301      	moveq	r3, #1
 8006484:	2300      	movne	r3, #0
 8006486:	b2db      	uxtb	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	79fb      	ldrb	r3, [r7, #7]
 800648c:	429a      	cmp	r2, r3
 800648e:	d0a0      	beq.n	80063d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800649a:	b480      	push	{r7}
 800649c:	b095      	sub	sp, #84	@ 0x54
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80064c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e6      	bne.n	80064a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e3      	bne.n	80064d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d118      	bne.n	8006546 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	60bb      	str	r3, [r7, #8]
   return(result);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f023 0310 	bic.w	r3, r3, #16
 8006528:	647b      	str	r3, [r7, #68]	@ 0x44
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6979      	ldr	r1, [r7, #20]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	613b      	str	r3, [r7, #16]
   return(result);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e6      	bne.n	8006514 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800655a:	bf00      	nop
 800655c:	3754      	adds	r7, #84	@ 0x54
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006572:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fc0f 	bl	8005da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b088      	sub	sp, #32
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6979      	ldr	r1, [r7, #20]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	613b      	str	r3, [r7, #16]
   return(result);
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e6      	bne.n	8006592 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fbda 	bl	8005d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065d8:	bf00      	nop
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_UARTEx_DisableFifoMode+0x16>
 800662e:	2302      	movs	r3, #2
 8006630:	e027      	b.n	8006682 <HAL_UARTEx_DisableFifoMode+0x66>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2224      	movs	r2, #36	@ 0x24
 800663e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006660:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d101      	bne.n	80066a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066a2:	2302      	movs	r3, #2
 80066a4:	e02d      	b.n	8006702 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2224      	movs	r2, #36	@ 0x24
 80066b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0201 	bic.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f850 	bl	8006788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800671e:	2302      	movs	r3, #2
 8006720:	e02d      	b.n	800677e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2224      	movs	r2, #36	@ 0x24
 800672e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f812 	bl	8006788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006794:	2b00      	cmp	r3, #0
 8006796:	d108      	bne.n	80067aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067a8:	e031      	b.n	800680e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067aa:	2308      	movs	r3, #8
 80067ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067ae:	2308      	movs	r3, #8
 80067b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	0e5b      	lsrs	r3, r3, #25
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	0f5b      	lsrs	r3, r3, #29
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	7b3a      	ldrb	r2, [r7, #12]
 80067d6:	4911      	ldr	r1, [pc, #68]	@ (800681c <UARTEx_SetNbDataToProcess+0x94>)
 80067d8:	5c8a      	ldrb	r2, [r1, r2]
 80067da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067de:	7b3a      	ldrb	r2, [r7, #12]
 80067e0:	490f      	ldr	r1, [pc, #60]	@ (8006820 <UARTEx_SetNbDataToProcess+0x98>)
 80067e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	7b7a      	ldrb	r2, [r7, #13]
 80067f4:	4909      	ldr	r1, [pc, #36]	@ (800681c <UARTEx_SetNbDataToProcess+0x94>)
 80067f6:	5c8a      	ldrb	r2, [r1, r2]
 80067f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067fc:	7b7a      	ldrb	r2, [r7, #13]
 80067fe:	4908      	ldr	r1, [pc, #32]	@ (8006820 <UARTEx_SetNbDataToProcess+0x98>)
 8006800:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006802:	fb93 f3f2 	sdiv	r3, r3, r2
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	080068c4 	.word	0x080068c4
 8006820:	080068cc 	.word	0x080068cc

08006824 <memset>:
 8006824:	4402      	add	r2, r0
 8006826:	4603      	mov	r3, r0
 8006828:	4293      	cmp	r3, r2
 800682a:	d100      	bne.n	800682e <memset+0xa>
 800682c:	4770      	bx	lr
 800682e:	f803 1b01 	strb.w	r1, [r3], #1
 8006832:	e7f9      	b.n	8006828 <memset+0x4>

08006834 <__libc_init_array>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	4d0d      	ldr	r5, [pc, #52]	@ (800686c <__libc_init_array+0x38>)
 8006838:	2600      	movs	r6, #0
 800683a:	4c0d      	ldr	r4, [pc, #52]	@ (8006870 <__libc_init_array+0x3c>)
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	42a6      	cmp	r6, r4
 8006842:	d109      	bne.n	8006858 <__libc_init_array+0x24>
 8006844:	4d0b      	ldr	r5, [pc, #44]	@ (8006874 <__libc_init_array+0x40>)
 8006846:	2600      	movs	r6, #0
 8006848:	4c0b      	ldr	r4, [pc, #44]	@ (8006878 <__libc_init_array+0x44>)
 800684a:	f000 f817 	bl	800687c <_init>
 800684e:	1b64      	subs	r4, r4, r5
 8006850:	10a4      	asrs	r4, r4, #2
 8006852:	42a6      	cmp	r6, r4
 8006854:	d105      	bne.n	8006862 <__libc_init_array+0x2e>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	f855 3b04 	ldr.w	r3, [r5], #4
 800685c:	3601      	adds	r6, #1
 800685e:	4798      	blx	r3
 8006860:	e7ee      	b.n	8006840 <__libc_init_array+0xc>
 8006862:	f855 3b04 	ldr.w	r3, [r5], #4
 8006866:	3601      	adds	r6, #1
 8006868:	4798      	blx	r3
 800686a:	e7f2      	b.n	8006852 <__libc_init_array+0x1e>
 800686c:	080068dc 	.word	0x080068dc
 8006870:	080068dc 	.word	0x080068dc
 8006874:	080068dc 	.word	0x080068dc
 8006878:	080068e0 	.word	0x080068e0

0800687c <_init>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr

08006888 <_fini>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	bf00      	nop
 800688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688e:	bc08      	pop	{r3}
 8006890:	469e      	mov	lr, r3
 8006892:	4770      	bx	lr
